<UserControl x:Name="userControl" x:Class="ViewMSOTc.ViewPatientAnalysisMeasurements"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ImagingSession="clr-namespace:Xvue.MSOT.ViewModels.ProjectManager.ImagingSession;assembly=Xvue.MSOT.ViewModels"
             xmlns:Converters="clr-namespace:Xvue.Framework.Views.WPF.Converters;assembly=Xvue.Framework.Views.WPF" 
             xmlns:ServicesImaging="clr-namespace:Xvue.MSOT.Services.Imaging;assembly=Xvue.MSOT" 
             xmlns:Controls="clr-namespace:Xvue.Framework.Views.WPF.Controls;assembly=Xvue.Framework.Views.WPF" 
             mc:Ignorable="d" d:DesignHeight="370" Loaded="UserControl_Loaded" DataContextChanged="UserControl_DataContextChanged">

    <UserControl.Resources>
        <ImagingSession:ViewModelImagingSuperSession x:Key="ViewModelImagingSuperSessionDataSource" d:IsDataSource="True"/>
        <Converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
        <CollectionViewSource x:Key='groupableRoiLayersSource' Source="{Binding AllVisibleRoiLayers}"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#222"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF526C7B"/>
        <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF003366"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="DarkGray"/>
        <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#666"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Transparent"/>
        <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="DarkGray"/>
        <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#666"/>
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="19"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse x:Name="circle" Grid.Column="1" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="Transparent" VerticalAlignment="Center" Width="19" Visibility="Collapsed"/>
                                <Path x:Name="arrow" Grid.Column="1" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center" Stretch="UniformToFill"/>
                                <ContentPresenter Grid.Column="0" HorizontalAlignment="Stretch" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                                <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                                <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="true">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RoiLayerNameGroupStyle" TargetType="{x:Type GroupItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupItem}">
                        <Expander IsExpanded="{Binding Items[0].IsVisible, Mode=TwoWay}" Style="{StaticResource ExpanderStyle1}" HorizontalContentAlignment="Stretch">
                            <Expander.Header>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label HorizontalAlignment="Left" Content="{Binding Items[0].RoiLayerName}" FontWeight="Bold" Margin="2"/>
                                    <Separator Grid.Column="1" Margin="5,5,10,5" BorderThickness="2" Height="4" BorderBrush="Black"/>
                                </Grid>
                            </Expander.Header>
                            <ItemsPresenter/>
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="25"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="90"/>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="DarkGray" VerticalAlignment="Center" Width="19" Visibility="Collapsed"/>
                                    <Path x:Name="arrow" Data="M1,1.5L4.5,5 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" Stroke="White" StrokeThickness="2" VerticalAlignment="Center" Stretch="UniformToFill"/>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource UidIconPressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource UidIconPressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ControlExpanderStyle" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="True">
                            <DockPanel>
                                <Grid DockPanel.Dock="Top" Background="Black" Margin="0,5,0,10" Height="60">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="HeaderSite2" Visibility="Collapsed" Grid.Column="1" VerticalAlignment="Center" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="True"/>
                                    <ToggleButton x:Name="HeaderSite" Grid.Column="0" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Style="{StaticResource ExpanderLeftHeaderStyle}"/>
                                </Grid>
                                <ContentPresenter x:Name="ExpandSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="HeaderSite2" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid Background="Black" d:DataContext="{Binding Source={StaticResource ViewModelImagingSuperSessionDataSource}}">
        <Expander x:Name="measurementExpander" ExpandDirection="Left" IsExpanded="True" Style="{DynamicResource ControlExpanderStyle}" BorderThickness="0" >
            <Expander.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="51"/>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Menu x:Name="roiPropertyMenu" Grid.Row="3" Background="{x:Null}" Grid.Column="3" Margin="0,0,10,0">
                        <MenuItem Template="{DynamicResource MenuItemInvertedVectorIconControlTemplate}" Header="{DynamicResource IconEditInformation}">
                            <MenuItem Header="Mean" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.Mean}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                            <MenuItem Header="Median" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.Median}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                            <MenuItem Header="Sum" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.Sum}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                            <MenuItem Header="Max" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.Max}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                            <MenuItem Header="Standard deviation" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.StdDeviation}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                            <MenuItem Header="Area above &quot;0&quot;" IsChecked="{Binding RoiLayerViewingProperty, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static ServicesImaging:RegionStatisticType.AreaAboveZero}}" IsCheckable="True" Style="{DynamicResource UidMenuItemRadioStyle}"/>
                        </MenuItem>
                    </Menu>

                    <!--<Button Style="{DynamicResource UidButtonInvertedStyle}" Grid.Column="3" Content="{DynamicResource IconEditInformation}" Height="45" Margin="0,0,0,0"/>-->
                    <Label Content="Size" Grid.Column="1" Foreground="White" VerticalAlignment="Center"/>
                    <Label Content="{Binding RoiLayerPropertyFriendlyName}" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                </Grid>
            </Expander.Header>
            <Grid Width="Auto" Background="White">

                <ItemsControl x:Name="roiLayersItemsControl" Background="Transparent" Margin="4" 
                              ItemsSource="{Binding Source={StaticResource groupableRoiLayersSource}}" 
                              ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                              ManipulationBoundaryFeedback="roiLayersItemsControl_ManipulationBoundaryFeedback">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" Orientation="Vertical"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.Template>
                        <ControlTemplate TargetType="{x:Type ItemsControl}">
                            <ScrollViewer IsDeferredScrollingEnabled="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </ControlTemplate>
                    </ItemsControl.Template>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Grid Margin="5">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="70"/>
                                    <ColumnDefinition Width="100"/>
                                    <ColumnDefinition Width="200"/>
                                </Grid.ColumnDefinitions>
                                <!--<TextBlock Grid.Column="0" HorizontalAlignment="Left" Text="{Binding RoiLayerName}"/>-->
                                <ToggleButton Grid.Column="0" Click="Button_Click" Height="30" Width="30">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border x:Name="border" BorderThickness="1" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                                            <Border.Background>
                                                                <SolidColorBrush Color="{Binding RoiColor, Mode=OneWay}"/>
                                                            </Border.Background>
                                                            <VisualStateManager.VisualStateGroups>
                                                                <VisualStateGroup x:Name="FocusStates">
                                                                    <VisualState x:Name="Unfocused"/>
                                                                    <VisualState x:Name="Focused"/>
                                                                </VisualStateGroup>
                                                            </VisualStateManager.VisualStateGroups>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsFocused" Value="True"/>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource UidIconPressedBrush}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource UidIconDisabledBrush}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                                                                <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <TextBlock Grid.Column="1" HorizontalAlignment="Left" Text="{Binding RoiAreaMM2AsString}"/>
                                <TextBlock Grid.Column="2" HorizontalAlignment="Center">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.Mean}">
                                                    <Setter Property="Text" Value="{Binding RoiMeanAsString}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.Median}">
                                                    <Setter Property="Text" Value="{Binding RoiMedianAsString}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.Sum}">
                                                    <Setter Property="Text" Value="{Binding RoiSumAsString}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.Max}">
                                                    <Setter Property="Text" Value="{Binding RoiMaxAsString}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.StdDeviation}">
                                                    <Setter Property="Text" Value="{Binding RoiStdDeviationAsString}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DataContext.RoiLayerViewingProperty, ElementName=userControl}" Value="{x:Static ServicesImaging:RegionStatisticType.AreaAboveZero}">
                                                    <Setter Property="Text" Value="{Binding RoiAreaAboveZeroAsString}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </Expander>
        <Controls:ClosingPopup x:Name="regionPropertiesPopup" StaysOpen="False" Placement="Left" OpacityMask="Black">
 
        </Controls:ClosingPopup>
    </Grid>
</UserControl>
