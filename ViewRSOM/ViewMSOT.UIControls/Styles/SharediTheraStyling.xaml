<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
	xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:Xvue_Framework_Views_WPF_Controls="clr-namespace:ViewRSOM.Framework.Views.WPF.Controls;assembly=Xvue.Framework.Views.WPF"	
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:extToolkit="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
    xmlns:Xceed_Wpf_Toolkit_Core_Converters="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d"	>
    <!--<Xceed_Wpf_Toolkit_Core_Converters:TimeFormatToDateTimeFormatConverter x:Key="TimeFormatToDateTimeFormatConverter"/>
    <Xceed_Wpf_Toolkit_Core_Converters:InverseBoolConverter x:Key="InverseBoolConverter"/>-->
    

    <!--Brushes used -->
    <SolidColorBrush x:Key="NeonBrush" Color="#FF39C1E5"/>
    <SolidColorBrush x:Key="NeonTextBrush" Color="#FF2FB7DB"/>
    <SolidColorBrush x:Key="BlackBackgroundBrush" Color="#FF2A2A2A"/>
	<SolidColorBrush x:Key="BackgroundLightColor" Color="#FFF5F5F5"/>
		
	<SolidColorBrush x:Key="UidIconActiveBrush" Color="#646464"/>
    <SolidColorBrush x:Key="UidIconDisabledBrush" Color="#FFDBDBDB"/>
    <SolidColorBrush x:Key="UidIconInvertedDisabledBrush" Color="#FF646464"/>
    <SolidColorBrush x:Key="UidIconInactiveBrush" Color="#646464"/>
	<SolidColorBrush x:Key="UidIconMouseOverBrush" Color="#FF2FB7DB"/>
	<SolidColorBrush x:Key="UidIconPressedBrush" Color="#FF2FB7DB"/>
	<SolidColorBrush x:Key="UidMarkedTextBackgroundBrush" Color="#646464"/>
	<SolidColorBrush x:Key="UidMarkedTextForegroundBrush" Color="#FFFFFF"/>	
	<SolidColorBrush x:Key="UidDisabledLabelForegroundBrush" Color="#CDCDCD"/>
	<SolidColorBrush x:Key="UidReadOnlyTextForegroundBrush" Color="#FF555555"/>
	<SolidColorBrush x:Key="UidDisabledLabeBackgroundBrush" Color="#FFFFFF"/>
	<SolidColorBrush x:Key="UidActiveLabelForegroundBrush" Color="#FF464646"/>
	<SolidColorBrush x:Key="UidActiveLabelBackgroundBrush" Color="#DEDEDE"/>
	<SolidColorBrush x:Key="UidBorderBrush" Color="#FFC5C5C5"/>	
	<SolidColorBrush x:Key="UidComboBoxMouseOverForegroundBrush" Color="#FF323232"/>
    <SolidColorBrush x:Key="UidComboBoxSelectedForegroundBrush" Color="#FF39C1E5"/>
    <SolidColorBrush x:Key="UidComboBoxForegroundBrush" Color="#FF646464"/>
	<SolidColorBrush x:Key="UidActiveControlBackgroundBrush" Color="White"/>
    <ImageBrush x:Key="UidBackgroundTexture" ImageSource="/ViewMSOT.UIControls/GFX/Textures/backround texture.bmp" Stretch="None" Viewport="0,0,40,32" ViewportUnits="Absolute" TileMode="Tile"/>
    <ImageBrush x:Key="CheckersTexture" ImageSource="/ViewMSOT.UIControls/GFX/Textures/checkers.jpg" Stretch="None" Viewport="0,0,11,11" ViewportUnits="Absolute" TileMode="Tile"/>
    <LinearGradientBrush x:Key="TransitionBrush" EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
        <GradientStop Color="Black" Offset="1"/>
        <GradientStop Color="Black"/>
        <GradientStop Color="Black" Offset="0.483"/>
        <GradientStop Color="#FE626262" Offset="0.241"/>
        <GradientStop Color="#FE000000" Offset="0.547"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="UidPresetTitleHeaderBrush" Color="#FFFFC000"/>
    <SolidColorBrush x:Key="SubMenuBackgroundBrush" Color="#FFF5F5F5"/>
    <LinearGradientBrush x:Key="MenuItemSelectionFill" EndPoint="0,1" StartPoint="0,0">
    	<GradientStop Color="#34C5EBFF" Offset="0"/>
    	<GradientStop Color="#3481D8FF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MenuItemPressedFill" EndPoint="0,1" StartPoint="0,0">
    	<GradientStop Color="#28717070" Offset="0"/>
    	<GradientStop Color="#50717070" Offset="0.75"/>
    	<GradientStop Color="#90717070" Offset="1"/>
    </LinearGradientBrush>
    <Thickness x:Key="UidIconPadding">2</Thickness>
    <!--Style Properties -->
    <SolidColorBrush x:Key="UidTextBoxBackground" Color="White"/><!--same as "UidActiveControlBackgroundBrush"-->
    <System:Double x:Key="UidTextBoxFontSize">20</System:Double>
    <Thickness x:Key="UidTextBoxPadding">2</Thickness>
    <CornerRadius x:Key="UidTextBoxCornerRadius">0</CornerRadius>
    <Thickness x:Key="UidTextBoxScrollViewerMargin">10,0,0,0</Thickness>
    <System:Double x:Key="UidTextBoxHeight">45</System:Double>
    <VerticalAlignment x:Key="UidTextBoxVerticalAlignment">Center</VerticalAlignment>
    <CornerRadius x:Key="UidButtonCornerRadius">0</CornerRadius>
    <Thickness x:Key="UidButtonPadding">7.5</Thickness>
    <Thickness x:Key="UidTextButtonPadding">3.5</Thickness>
    <System:Double x:Key="UidButtonHeight">60</System:Double>
    <System:Double x:Key="UidTextButtonHeight">45</System:Double>
    <System:Double x:Key="UidCheckBoxHeight">45</System:Double>
    <System:Double x:Key="UidButtonWidth">60</System:Double>
    <System:Double x:Key="UidMenuItemHeight">60</System:Double>
    <System:Double x:Key="UidMenuItemFontSize">20</System:Double>
    <GridLength x:Key="UidMenuItemFirstColumnWidth">60</GridLength>
    <GridLength x:Key="UidMenuItemLastColumnWidth">60</GridLength>
    <System:Double x:Key="UidMenuItemIconWidthHeight">25</System:Double>
    <System:Double x:Key="UidMenuItemGlyphPanelWidthHeight">25</System:Double>
    <VerticalAlignment x:Key="UidMenuItemContentVerticalAlignment">Center</VerticalAlignment>
    <System:Double x:Key="UidMenuItemArrowPanelWidthHeight">25</System:Double>
    <Stretch x:Key="UidMenuItemPathStretch">Uniform</Stretch>
    <Thickness x:Key="UidThumbStyleMargin">10</Thickness>
    <GridLength x:Key="UidSliderLargeColumnWidth">Auto</GridLength>
    <GridLength x:Key="UidSliderSmallColumnWidth">7</GridLength>
    <GridLength x:Key="UidSliderRowHeight">45</GridLength>
    <System:Double x:Key="UidSliderBorderHeight">5</System:Double>
    <System:Double x:Key="UidSliderRepeatButtonWidth">25</System:Double>
    <System:Double x:Key="UidSliderRepeatButtonHeight">35</System:Double>
    <System:Double x:Key="UidSliderThumbWidthHeight">45</System:Double>
    <System:Double x:Key="UidSliderArrowStyleMinWidth">275</System:Double>
    <System:Double x:Key="UidComboBoxFontSize">20</System:Double>
    <System:Double x:Key="UidComboBoxHeight">45</System:Double>
    <GridLength x:Key="UidComboBoxButtonWidth">60</GridLength>
    <System:Double x:Key="UidComboBoxItemHeight">60</System:Double>
    <Thickness x:Key="UidComboBoxItemContentMargin">10,0,10,0</Thickness>
    <VerticalAlignment x:Key="UidComboBoxItemContentVerticalAlignment">Center</VerticalAlignment>
    <System:Double x:Key="UidListViewItemHeight1">40</System:Double>
    <Thickness x:Key="UidButtonBorderThickness">0</Thickness>
    <Thickness x:Key="UidButtonPressedBorderThickness">0</Thickness>
    <SolidColorBrush x:Key="UidInvertedButtonPathPressedBrush" Color="White"/>
    <SolidColorBrush x:Key="UidInvertedButtonBackgroundPressedBrush" Color="#FF2FB7DB"/>
    <SolidColorBrush x:Key="UidButtonPathPressedBrush" Color="#646464"/>
    <SolidColorBrush x:Key="UidButtonBackgroundPressedBrush" Color="#FF2FB7DB"/>
    <!--End Style Properties -->
    <!--Touch Area. This should be greater than 12-->
    <System:Double x:Key="ControlThumbsTouchAreaLength">30</System:Double>
    <!--EndTouch-->
    <Style x:Key="ButtonFocusVisual">
    	<Setter Property="Control.Template">
    		<Setter.Value>
    			<ControlTemplate>
    				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
    	<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
    		<Grid>
    			<AdornerDecorator>
    				<ContentPresenter/>
    			</AdornerDecorator>
    			<ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
    		</Grid>
    	</Border>
    	<ControlTemplate.Triggers>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
    				<Condition Property="WindowState" Value="Normal"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
    		</MultiTrigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<Grid x:Name="grid" Height="{Binding ActualWidth, ElementName=grid}">		
    					<Ellipse x:Name="ellipse" Fill="#FF282828"/>
    					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="2"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Stroke" TargetName="ellipse" Value="{DynamicResource NeonBrush}"/>
    						<Setter Property="Effect" TargetName="ellipse">
    							<Setter.Value>
    								<BlurEffect/>
    							</Setter.Value>
    						</Setter>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="Fill" TargetName="ellipse" Value="#FF393939"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False"/>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="TabControlNeonStyle" TargetType="{x:Type TabControl}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type TabControl}">
    				<Grid KeyboardNavigation.TabNavigation="Local">
    					<Grid.RowDefinitions>
    						<RowDefinition Height="Auto"/>
    						<RowDefinition Height="*"/>
    					</Grid.RowDefinitions>
						
						<!-- TabPanel is a layout container which allows the TabItems to wrap and re-order when selected
						The implementation knows to use this control because it is marked IsItemsHost = True -->
    					<TabPanel Grid.Row="0" Margin="4,2,4,1" x:Name="HeaderPanel" IsItemsHost="True" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" OverridesDefaultStyle="False">
    						<TabPanel.Background>
    							<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
    								<GradientStop Color="Black" Offset="0"/>
    								<GradientStop Color="Black" Offset="0.993"/>
    								<GradientStop Color="#FE000000" Offset="0.787"/>
    								<GradientStop Color="#FE505050" Offset="0.86"/>
    								<GradientStop Color="#FE000000" Offset="0.937"/>
    							</LinearGradientBrush>
    						</TabPanel.Background>
    					</TabPanel>
						
    					<Border Grid.Row="1" x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">
							
							<!-- The implementation switches the content. This control must be named PART_SelectedContentHost -->
    						<ContentPresenter Margin="4" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
							
    					</Border>
    				</Grid>
					
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
    						<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
				
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="TabItemNeonStyle" d:IsControlPart="True" TargetType="{x:Type TabItem}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type TabItem}">
    				<Grid Margin="0,5,0,14">
    					<Border x:Name="Border" BorderBrush="{DynamicResource SolidBorderBrush}" CornerRadius="0" MinHeight="40">
    						<Label HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding Header}" Foreground="White"/>
    					</Border>
    					<Border x:Name="marker"  Height="4" VerticalAlignment="Top" Margin="10,0" Visibility="Hidden" CornerRadius="0,0,5,5">
    						<Border.Effect>
    							<BlurEffect Radius="3"/>
    						</Border.Effect>
    					</Border>
    					<Rectangle Fill="{DynamicResource LightBrush}" StrokeThickness="0" HorizontalAlignment="Left" Width="1" Height="10" VerticalAlignment="Top" Visibility="Collapsed"/>
    					<Rectangle Fill="{DynamicResource LightBrush}" StrokeThickness="0" HorizontalAlignment="Right" Width="1" Height="10" VerticalAlignment="Top"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="Selector.IsSelected" Value="False">
    						<Setter Property="Foreground" Value="#FFFFFFFF"/>
    					</Trigger>
    					<Trigger Property="IsSelected" Value="True">
    						<Setter Property="Panel.ZIndex" Value="100"/>									
    						<Setter Property="Visibility" TargetName="marker" Value="Visible"/>
    						<Setter Property="Foreground" TargetName="ContentSite" Value="{DynamicResource NeonBrush}"/>
    						<Setter Property="Background" TargetName="marker" Value="{DynamicResource NeonBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">    						
    						<Setter Property="Foreground"  TargetName="ContentSite" Value="{DynamicResource DisabledForegroundBrush}"/>
    					</Trigger>
    					<Trigger Property="IsMouseOver" Value="True">
    						
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <!-- Styles -->
	<Style x:Key="UidCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Height" Value="{DynamicResource UidCheckBoxHeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    
                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                	<BulletDecorator Background="Transparent" Margin="0">
                		<BulletDecorator.Bullet>
                			<Canvas x:Name="canvas" ClipToBounds="False" Width="{Binding Height, ElementName=canvas}" VerticalAlignment="Stretch" Height="{TemplateBinding Height}">
                				<Border x:Name="Border" Width="{Binding ActualWidth, ElementName=canvas}" Height="{Binding ActualWidth, ElementName=canvas}" BorderBrush="#FF9D9D9D" BorderThickness="1" Background="{DynamicResource UidActiveControlBackgroundBrush}" />
                				<!--<Path x:Name="CheckMark" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" SnapsToDevicePixels="False" Data="M1,7.0836667 L6.8336667,13.333667 M6.3333333,12.500333 L13.833667,1" Margin="0.75,-1.647,-2.584,0.313"/>-->
                				<Path  x:Name="CheckMark" Data=
								"F1 M165.13365,198.33526 L153.69773,211.11828 146.8674,204.07169 144.48653,206.30252 153.61976,215.86413 167.59306,200.49536 z" Fill="{TemplateBinding Foreground}" Height="{Binding ActualHeight, ElementName=canvas}" Stretch="Fill" Width="{Binding ActualWidth, ElementName=canvas}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stroke="{TemplateBinding Foreground}" 
								RenderTransformOrigin="0.5,0.5">
                					<Path.RenderTransform>
                						<TransformGroup>
                							<ScaleTransform ScaleX="0.9" ScaleY="0.8"/>
                							<SkewTransform/>
                							<RotateTransform/>
                							<TranslateTransform X="-0.10559999999999903" Y="0.032700000000000173"/>
                						</TransformGroup>
                					</Path.RenderTransform>
                				</Path>

                			</Canvas>
                		</BulletDecorator.Bullet>
                		<!--    <ContentPresenter RecognizesAccessKey="True" VerticalAlignment="Top" Margin="12,3,0,0" OpacityMask="{x:Null}"/>-->
                		<VisualStateManager.VisualStateGroups>
                			<VisualStateGroup x:Name="FocusStates">
                				<VisualState x:Name="Unfocused"/>
                				<VisualState x:Name="Focused"/>
                			</VisualStateGroup>
                		</VisualStateManager.VisualStateGroups>
                		<TextBlock x:Name="textContent" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="12,0,0,0" VerticalAlignment="Center"/>
                	</BulletDecorator>
                    
                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF40C3E5"/>
                            <Setter Property="TextBlock.Foreground" TargetName="textContent" Value="#FF40C3E5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF40C3E5"/>
                            <Setter Property="BorderThickness" TargetName="Border" Value="2"/>
                            <Setter Property="TextBlock.Foreground" TargetName="textContent" Value="#FF40C3E5"/>                           
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Background" TargetName="Border" Value="{x:Null}"/>
                            <Setter Property="OpacityMask" TargetName="CheckMark" Value="{x:Null}"/>
                            <Setter Property="Stroke" TargetName="CheckMark" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="{DynamicResource UidTextBoxFontSize}"/>
    </Style>	
    <Style x:Key="UidProgressBarStyle" TargetType="{x:Type ProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid>					
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Determinate"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					
						<!-- This Border is the track. It must be named PART_Track -->
						<Border x:Name="PART_Track" Background="Black" BorderBrush="#FF9D9D9D" BorderThickness="1">
							<Rectangle Fill="Black" Margin="5,-1"/>
						</Border>
						
						<!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
						<!--<Border HorizontalAlignment="Left" x:Name="PART_Indicator" CornerRadius="2" Margin="2,3" Background="{DynamicResource NeonBrush}">
							<Border.Effect>
								<BlurEffect Radius="3" KernelType="Gaussian"/>
							</Border.Effect>
						</Border>-->
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
							<Grid x:Name="Foreground">
								<Border x:Name="Indicator" Background="{DynamicResource NeonBrush}" Margin="2,3">
									<Border.Effect>
										<BlurEffect Radius="3" KernelType="Gaussian"/>
									</Border.Effect>
								</Border>
								<Grid x:Name="Animation" ClipToBounds="true"  Margin="2,3">
									<Rectangle x:Name="PART_GlowRect" Fill="{DynamicResource NeonBrush}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="80"/>
								</Grid>					
							</Grid>
						</Decorator>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsIndeterminate" Value="true">
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="false">
							<Setter Property="Visibility" TargetName="Animation" Value="Collapsed"/>
						</Trigger>
					</ControlTemplate.Triggers>					
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="UidTextBox" TargetType="{x:Type TextBox}">
    	<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    	<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    	<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
		<!--<Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>-->
		<Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="FontSize" Value="{DynamicResource UidTextBoxFontSize}"/>
		<Setter Property="SelectionBrush" Value="{DynamicResource UidMarkedTextBackgroundBrush}"/>				
		<Setter Property="CaretBrush" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="{DynamicResource UidTextBoxVerticalAlignment}"/>
        <Setter Property="Height" Value="{DynamicResource UidTextBoxHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidTextBoxPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type TextBox}">
    				<Grid>
                        <Border x:Name="Border" Background="{DynamicResource UidTextBoxBackground}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="{TemplateBinding Padding}" CornerRadius="{DynamicResource UidTextBoxCornerRadius}">
						<!--<Border x:Name="Border" Background="{DynamicResource UidDisabledLabeBackgroundBrush}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">-->
							<!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="{DynamicResource UidTextBoxScrollViewerMargin}" x:Name="PART_ContentHost" BorderBrush="Black"  />						
    					</Border>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
    						<!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
    						<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    					</Trigger>
    					<Trigger Property="IsReadOnly" Value="true">
    						<Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
    						<!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
    						<Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>    	
    </Style>
    <Style x:Key="UidTextBoxNoBorder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <!--<Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>-->
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="FontSize" Value="{DynamicResource UidTextBoxFontSize}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource UidMarkedTextBackgroundBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource UidTextBoxBackground}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="0" Padding="{DynamicResource UidTextBoxPadding}" CornerRadius="{DynamicResource UidTextBoxCornerRadius}">
                            <!--<Border x:Name="Border" Background="{DynamicResource UidDisabledLabeBackgroundBrush}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">-->
                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="{DynamicResource UidTextBoxScrollViewerMargin}" x:Name="PART_ContentHost" BorderBrush="Black"  />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidButtonMetroStyle" TargetType="{x:Type Button}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<!--<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="2" Background="#00000000">-->
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform" Margin="8"/>
    						<Ellipse x:Name="border" Fill="#00000000" Stroke="Black"/>																					
    					</Grid>    				
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Stroke" TargetName="border" Value="Black"/>
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="Stroke" TargetName="border" Value="Black"/>
    						<Setter Property="StrokeThickness" TargetName="border" Value="2"/>
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="StrokeThickness" TargetName="border" Value="1"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<VisualStateManager.VisualStateGroups>
    						<VisualStateGroup x:Name="FocusStates">
    							<VisualState x:Name="Unfocused"/>
    							<VisualState x:Name="Focused"/>
    						</VisualStateGroup>
    					</VisualStateManager.VisualStateGroups>
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>    						
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidButtonPathPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidButtonBackgroundPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonBorderThickness}"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidButtonTextStyle2" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidTextButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidTextButtonPadding}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000" BorderBrush="Black">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Label x:Name="path" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="{DynamicResource UidIconActiveBrush}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource UidIconPressedBrush}"/>
                            <Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource UidIconPressedBrush}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                            <Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource UidIconDisabledBrush}"/>
                            <Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidButtonIconStyle" TargetType="{x:Type Button}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>
                        </Grid>
                    </Border>					
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	<Style x:Key="UidButtonIconEnableStyle" TargetType="{x:Type Button}">
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidActiveControlBackgroundBrush}" Stretch="Uniform"/>
                        </Grid>
                    </Border>					
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidButtonAlwaysDisabledStyle" TargetType="{x:Type Button}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
    					<VisualStateManager.VisualStateGroups>
    						<VisualStateGroup x:Name="FocusStates">
    							<VisualState x:Name="Unfocused"/>
    							<VisualState x:Name="Focused"/>
    						</VisualStateGroup>
    					</VisualStateManager.VisualStateGroups>
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>    						
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="BorderThickness" TargetName="border" Value="1"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
						<Trigger Property="IsEnabled" Value="True">
    						<Setter Property="BorderThickness" TargetName="border" Value="1"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidTextButtonStyle" TargetType="{x:Type Button}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="2" Background="#00000000">
    					<TextBlock x:Name="textContent" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Center" VerticalAlignment="Center" TextDecorations="Underline"/>				
					</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="BorderThickness" TargetName="border" Value="1"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidButtonInvertedStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>							
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonBorderThickness}"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidScanButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="Black" Stretch="Uniform"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconActiveBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidEditButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="Gray" Stretch="Uniform"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonBorderThickness}"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconActiveBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidTextButtonInvertedStyle" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="2" Background="#00000000">
					    <TextBlock x:Name="textContent" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center" TextDecorations="Underline"/>				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="BorderThickness" TargetName="border" Value="1"/>
    						<Setter Property="Foreground" TargetName="textContent" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>

    </Style>
    <Style x:Key="UidToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>							
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidButtonPathPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidButtonBackgroundPressedBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidToggleButtonInvertedStyle" TargetType="{x:Type ToggleButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>							
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
	<Style x:Key="UidToggleButtonInvertedTextStyle" TargetType="{x:Type ToggleButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
    	<Setter Property="Padding" Value="1"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ToggleButton}">
    				<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
    					<Grid>														
    						<!-- Content for the menu text etc -->    						
							<TextBlock x:Name="path" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Center" Foreground="White" VerticalAlignment="Center"/>				
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
							<Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Foreground" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>	
    <Style x:Key="UidRepeatButtonInvertedStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<VisualStateManager.VisualStateGroups>
    						<VisualStateGroup x:Name="FocusStates">
    							<VisualState x:Name="Unfocused"/>
    							<VisualState x:Name="Focused"/>
    						</VisualStateGroup>
    					</VisualStateManager.VisualStateGroups>
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>							
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Height" Value="{DynamicResource UidMenuItemHeight}"/>
        <Setter Property="FontSize" Value="{DynamicResource UidMenuItemFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}" >
                    <Border x:Name="Border" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid >

                            <!-- ContentPresenter to show an Icon if needed -->
                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{DynamicResource UidMenuItemFirstColumnWidth}" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="{DynamicResource UidMenuItemLastColumnWidth}"/>
                            </Grid.ColumnDefinitions>

                            <Path x:Name="Icon" Data="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform" Width="{DynamicResource UidMenuItemIconWidthHeight}" Height="{DynamicResource UidMenuItemIconWidthHeight}" Margin="4,0,8,0"/>


                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" Width="{DynamicResource UidMenuItemIconWidthHeight}" Height="{DynamicResource UidMenuItemIconWidthHeight}" Stretch="{DynamicResource UidMenuItemPathStretch}"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" VerticalAlignment="{DynamicResource UidMenuItemContentVerticalAlignment}" RecognizesAccessKey="True" ContentSource="Header"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center" Width="{DynamicResource UidMenuItemArrowPanelWidthHeight}" Height="{DynamicResource UidMenuItemArrowPanelWidthHeight}">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" Stretch="{DynamicResource UidMenuItemPathStretch}"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="2">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>

                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                            <Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidMenuItemRadioStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Height" Value="{DynamicResource UidMenuItemHeight}"/>
        <Setter Property="FontSize" Value="{DynamicResource UidMenuItemFontSize}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}" >
                    <Border x:Name="Border" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid >

                            <!-- ContentPresenter to show an Icon if needed -->
                            <!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{DynamicResource UidMenuItemFirstColumnWidth}" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="{DynamicResource UidMenuItemLastColumnWidth}"/>
                            </Grid.ColumnDefinitions>

                            <Path x:Name="Icon" Data="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform" Width="{DynamicResource UidMenuItemIconWidthHeight}" Height="{DynamicResource UidMenuItemIconWidthHeight}" Margin="4,0,8,0"/>


                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="F1 M 16.4167,0.500023C 25.2072,0.500023 32.3333,7.55151 32.3333,16.25C 32.3333,24.9485 25.2072,32 16.4167,32C 7.62616,32 0.500031,24.9485 0.500031,16.25C 0.500031,7.55151 7.62614,0.500023 16.4167,0.500023 Z" FlowDirection="LeftToRight" Width="{DynamicResource UidMenuItemIconWidthHeight}" Height="{DynamicResource UidMenuItemIconWidthHeight}" Stretch="{DynamicResource UidMenuItemPathStretch}"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" VerticalAlignment="{DynamicResource UidMenuItemContentVerticalAlignment}" RecognizesAccessKey="True" ContentSource="Header"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center" Width="{DynamicResource UidMenuItemArrowPanelWidthHeight}" Height="{DynamicResource UidMenuItemArrowPanelWidthHeight}">
                                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" Stretch="{DynamicResource UidMenuItemPathStretch}"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="2">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>

                                    <!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                            <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
                            <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
                            <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                            <Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}">
    	<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>		
		<Setter Property="FontFamily" Value="Segoe UI Semibold"/>		
		<Setter Property="FontSize" Value="13"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ComboBox}">
    				<Grid>
						<!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
    					<ToggleButton Grid.Column="2" Template="{DynamicResource UidComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
    					<ContentPresenter HorizontalAlignment="Left" Margin="10,3,40,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
						<!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
    					<TextBox Visibility="Hidden" Template="{DynamicResource UidComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
						<!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
    					<Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
    						<Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
    							<Border x:Name="DropDownBorder" Background="{DynamicResource UidActiveControlBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
    							<ScrollViewer Margin="0" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
							
									<!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
    								<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								
    							</ScrollViewer>
    						</Grid>
    					</Popup>
    				</Grid>
    				<ControlTemplate.Triggers>						
						<!-- This forces the DropDown to have a minimum size if it is empty -->
    					<Trigger Property="HasItems" Value="false">
    						<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    					</Trigger>
    					<Trigger Property="IsGrouping" Value="true">
    						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    					</Trigger>
    					<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
    						<Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
    						<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
    					</Trigger>
    					<Trigger Property="IsEditable" Value="true">
    						<Setter Property="IsTabStop" Value="false"/>
    						<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
    						<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>    
    <ControlTemplate x:Key="UidComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    	<Grid>
    		<Grid.ColumnDefinitions>
    			<ColumnDefinition/>
    			<ColumnDefinition Width="20"/>
    		</Grid.ColumnDefinitions>
    		<Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource UidActiveControlBackgroundBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
    		<Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5"/>
    		<!--<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>-->
    		<Path x:Name="Arrow" Data="F1M241,124L237,128L233,124L230,124L237,131L244,124z" Fill="{DynamicResource UidMarkedTextBackgroundBrush}" Height="7" Stretch="Fill" Width="14" HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
    			<Path.RenderTransform>
    				<TransformGroup>
    					<ScaleTransform/>
    					<SkewTransform/>
    					<RotateTransform/>
    					<TranslateTransform/>
    				</TransformGroup>
    			</Path.RenderTransform>
    		</Path>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="IsMouseOver" Value="true">
    			<Setter Property="Fill" Value="{DynamicResource UidActiveControlBackgroundBrush}" TargetName="Rectangle"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="true">
    			<Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource UidActiveLabelBackgroundBrush}"/>
    			<Setter Property="RenderTransform" TargetName="Arrow">
    				<Setter.Value>
    					<TransformGroup>
    						<ScaleTransform ScaleX="1" ScaleY="-1"/>
    						<SkewTransform/>
    						<RotateTransform/>
    						<TranslateTransform/>
    					</TransformGroup>
    				</Setter.Value>
    			</Setter>
    		</Trigger>
    		<Trigger Property="IsEnabled" Value="False">
    			<Setter Property="Fill" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Rectangle"/>
    			<!--<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>-->
    			<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    			<Setter Property="Fill" Value="{DynamicResource UidDisabledLabelForegroundBrush}" TargetName="Arrow"/>
    		</Trigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="UidComboBoxTextBox" TargetType="{x:Type TextBox}">    	
		<!-- This must be named as PART_ContentHost -->
    	<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>
    <Style  TargetType="{x:Type ComboBoxItem}">
    	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="FontFamily" Value="Segoe UI"/>		
    	<Setter Property="Padding" Value="0,0,0,0"/>
    	<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{DynamicResource UidComboBoxForegroundBrush}"/>
        <Setter Property="FontSize" Value="{DynamicResource UidComboBoxFontSize}"/>
        <Setter Property="Height" Value="{DynamicResource UidComboBoxItemHeight}"/>
        <Setter Property="VerticalContentAlignment" Value="{DynamicResource UidComboBoxItemContentVerticalAlignment}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ComboBoxItem}">
    				<!--<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
    					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    				</Border>-->
					<Border x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="0,0,0,1" Padding="0,5" Margin="1,0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{DynamicResource UidComboBoxItemContentMargin}"/>
    				</Border>					
    				<ControlTemplate.Triggers>
    					<Trigger Property="Selector.IsSelected" Value="True">
    						<Setter Property="Foreground" Value="{DynamicResource UidComboBoxSelectedForegroundBrush}"/>
							<Setter Property="FontFamily" Value="Segoe UI SemiBold"/>		
    					</Trigger>
    					<Trigger Property="IsHighlighted" Value="true">
    						<Setter Property="Foreground" Value="{DynamicResource UidComboBoxMouseOverForegroundBrush}"/>
							<Setter Property="FontFamily" Value="Segoe UI SemiBold"/>		
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidItemsControl" TargetType="{x:Type ItemsControl}">
    	<Setter Property="SnapsToDevicePixels" Value="true"/>
    	<Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
    	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    	<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ItemsControl}">
    				<Grid>
    					<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
    					<ScrollViewer Margin="1" Focusable="false" Background="{TemplateBinding Background}" x:Name="scrollViewer">
							
							<!-- The StackPanel is used to display the children by setting IsItemsHost to be Trus -->
    						<StackPanel Margin="2" IsItemsHost="true"/>
							
    					</ScrollViewer>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
    						<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
    					</Trigger>
    					<Trigger Property="IsGrouping" Value="true">
    						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
	<!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
	<Style x:Key="UidSliderRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Background="#00000000">
						<Path x:Name="contentPath" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							Fill="{TemplateBinding Background}"
							Stretch="Uniform" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
					</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="contentPath"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="UidSliderRepeatButtonInvertedStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="#00000000">
                        <Path x:Name="contentPath" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
							Fill="{TemplateBinding Background}"
							Stretch="Uniform" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="contentPath"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Simple Simple SliderThumb - The Thumb is the draggable part of a Slider-->
	<Style x:Key="UidThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Height" Value="14"/>
		<Setter Property="Width" Value="14"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid>
						<Ellipse x:Name="Ellipse" Fill="{TemplateBinding Background}" Stroke="#FF848484" StrokeThickness="0" Margin="{DynamicResource UidThumbStyleMargin}"/>
						<Ellipse x:Name="EllipseHalo" Fill="{TemplateBinding Background}" Stroke="#FF848484" StrokeThickness="0" Opacity="0.3" OpacityMask="Black"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="UidThumbInvertedStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse x:Name="Ellipse" Fill="{TemplateBinding Background}" Stroke="#FF848484" StrokeThickness="0" Margin="{DynamicResource UidThumbStyleMargin}"/>
                        <Ellipse x:Name="EllipseHalo" Fill="{TemplateBinding Background}" Stroke="#FF848484" StrokeThickness="0" Opacity="0.3" OpacityMask="Black"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="Ellipse"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidSliderStyleSmallChange" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="12"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="12"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
                        <RepeatButton Grid.ColumnSpan="1" Grid.Column="4"
    						Grid.Row="1" d:LayoutOverrides="Width" HorizontalAlignment="Stretch" x:Name="incRep" Content="{DynamicResource IconAdd}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.IncreaseSmall" Background="{TemplateBinding Background}"/>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="15" Height="15"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.ColumnSpan="1"
    						Grid.Row="1" VerticalAlignment="Stretch" x:Name="decRep" Content="{DynamicResource IconMinus}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.DecreaseSmall" Background="{TemplateBinding Background}" Height="Auto" Width="Auto"/>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidSliderStyle" TargetType="{x:Type Slider}">
    	<Setter Property="Background" Value="{DynamicResource LightBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Slider}">
    				<Grid x:Name="GridRoot">
    					<Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
    						<ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
    					</Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="Auto"/>
                            <RowDefinition Height="{DynamicResource UidSliderRowHeight}" MinHeight="{TemplateBinding MinHeight}"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
						
						<!-- TickBar shows the ticks for Slider -->
    					<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="{DynamicResource UidSliderBorderHeight}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
    					<RepeatButton Grid.ColumnSpan="1" Grid.Column="4"
    						Grid.Row="1" d:LayoutOverrides="Width" HorizontalAlignment="Stretch" x:Name="incRep" Content="{DynamicResource IconAdd}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.IncreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>
						
						<!-- The Track lays out the repeat buttons and thumb -->
    					<Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
    						<Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="{DynamicResource UidSliderThumbWidthHeight}" Height="{DynamicResource UidSliderThumbWidthHeight}"/>
    						</Track.Thumb>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
    						</Track.IncreaseRepeatButton>
    						<Track.DecreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
    						</Track.DecreaseRepeatButton>
    					</Track>
    					<RepeatButton Grid.ColumnSpan="1"
    						Grid.Row="1" VerticalAlignment="Stretch" x:Name="decRep" Content="{DynamicResource IconMinus}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.DecreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>
						
    					<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
    						<Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
    						<Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="TopLeft">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="BottomRight">
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="Both">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
    						<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
    					</Trigger>
						
						<!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
    					<Trigger Property="Orientation" Value="Vertical">
    						<Setter Property="LayoutTransform" TargetName="GridRoot">
    							<Setter.Value>
    								<RotateTransform Angle="-90"/>
    							</Setter.Value>
    						</Setter>
							<!-- Track rotates itself based on orientation so need to force it back -->
    						<Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
    					</Trigger>
						
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidSliderInvertedStyle" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource UidIconDisabledBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="{DynamicResource UidSliderRowHeight}" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="{DynamicResource UidSliderBorderHeight}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
                        <RepeatButton Grid.ColumnSpan="1" Grid.Column="4"
    						Grid.Row="1" d:LayoutOverrides="Width" HorizontalAlignment="Stretch" x:Name="incRep" Content="{DynamicResource IconAdd}" Style="{DynamicResource UidSliderRepeatButtonInvertedStyle}"
    						Command="Slider.IncreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbInvertedStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="{DynamicResource UidSliderThumbWidthHeight}" Height="{DynamicResource UidSliderThumbWidthHeight}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.ColumnSpan="1"
    						Grid.Row="1" VerticalAlignment="Stretch" x:Name="decRep" Content="{DynamicResource IconMinus}" Style="{DynamicResource UidSliderRepeatButtonInvertedStyle}"
    						Command="Slider.DecreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="Border"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidSliderReversedStyle" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="12"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="12"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <!-- TickBar shows the ticks for Slider -->
                        <TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="2" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
                        <RepeatButton Grid.ColumnSpan="1" Grid.Column="4"
    						Grid.Row="1" d:LayoutOverrides="Width" HorizontalAlignment="Stretch" x:Name="incRep" Content="{DynamicResource IconAdd}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.DecreaseLarge" Background="{TemplateBinding Background}"/>

                        <!-- The Track lays out the repeat buttons and thumb -->
                        <Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="15" Height="15"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                            </Track.DecreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.ColumnSpan="1"
    						Grid.Row="1" VerticalAlignment="Stretch" x:Name="decRep" Content="{DynamicResource IconMinus}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.IncreaseLarge" Background="{TemplateBinding Background}" Height="Auto" Width="Auto"/>

                        <TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
                            <Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>

                        <!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <!-- Track rotates itself based on orientation so need to force it back -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidSliderNoSymbolsStyle" TargetType="{x:Type Slider}">
    	<Setter Property="Background" Value="{DynamicResource LightBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Slider}">
    				<Grid x:Name="GridRoot">
    					<Grid.ColumnDefinitions>
    						<ColumnDefinition Width="0"/>
    						<ColumnDefinition Width="0"/>
    						<ColumnDefinition Width="*"/>
    						<ColumnDefinition Width="0"/>
    						<ColumnDefinition Width="0"/>
    					</Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="Auto"/>
                            <RowDefinition Height="{DynamicResource UidSliderRowHeight}" MinHeight="{TemplateBinding MinHeight}"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
						
						<!-- TickBar shows the ticks for Slider -->
    					<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="{DynamicResource UidSliderBorderHeight}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
						
						<!-- The Track lays out the repeat buttons and thumb -->
    					<Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
    						<Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="{DynamicResource UidSliderThumbWidthHeight}" Height="{DynamicResource UidSliderThumbWidthHeight}"/>
    						</Track.Thumb>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
    						</Track.IncreaseRepeatButton>
    						<Track.DecreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
    						</Track.DecreaseRepeatButton>
    					</Track>
						
    					<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="TopLeft">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="BottomRight">
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="Both">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
    						<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
    					</Trigger>
						
						<!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
    					<Trigger Property="Orientation" Value="Vertical">
    						<Setter Property="LayoutTransform" TargetName="GridRoot">
    							<Setter.Value>
    								<RotateTransform Angle="-90"/>
    							</Setter.Value>
    						</Setter>
							<!-- Track rotates itself based on orientation so need to force it back -->
    						<Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
    					</Trigger>
						
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="ListBoxItemStretchStyle" TargetType="{x:Type ListBoxItem}">			
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
    	<Setter Property="Padding" Value="2,0,0,0"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ListBoxItem}">
    				<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Padding="2">
    					<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsSelected" Value="true">
    						<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
    					</Trigger>
    					<MultiTrigger>
    						<MultiTrigger.Conditions>
    							<Condition Property="IsSelected" Value="true"/>
    							<Condition Property="Selector.IsSelectionActive" Value="false"/>
    						</MultiTrigger.Conditions>
    						<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
    						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    					</MultiTrigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="ListBoxItemStretchStyle2" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="Height" Value="{DynamicResource UidListViewItemHeight1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Padding="2">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{DynamicResource UidComboBoxItemContentMargin}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LabelNoAccessKeyStyle" TargetType="{x:Type Label}">
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="Padding" Value="5"/>
    	<Setter Property="HorizontalContentAlignment" Value="Left"/>
    	<Setter Property="VerticalContentAlignment" Value="Top"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Label}">
    				<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
    					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    	<Grid SnapsToDevicePixels="true">
    		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
    		<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
    		<Grid>
    			<Grid.ColumnDefinitions>
    				<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
    				<ColumnDefinition Width="4"/>
    				<ColumnDefinition Width="*"/>
    				<ColumnDefinition Width="37"/>
    				<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
    				<ColumnDefinition Width="17"/>
    			</Grid.ColumnDefinitions>
    			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    			<Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
    				<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
    			</Border>
    			<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    			<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
    		</Grid>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="Icon" Value="{x:Null}">
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="true">
    			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsHighlighted" Value="true">
    			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
    			<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
    		</Trigger>
    		<Trigger Property="IsEnabled" Value="false">
    			<Setter Property="Foreground" Value="#FF9A9A9A"/>
    			<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
    			<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
    			<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
    		</Trigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
    	<Setter Property="ClickMode" Value="Hover"/>
    	<Setter Property="MinWidth" Value="0"/>
    	<Setter Property="MinHeight" Value="0"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<DockPanel Background="Transparent" SnapsToDevicePixels="true">
    					<Rectangle x:Name="R1" DockPanel.Dock="Right" Fill="Transparent" Width="1"/>
    					<Rectangle x:Name="B1" DockPanel.Dock="Bottom" Fill="Transparent" Height="1"/>
    					<Rectangle x:Name="L1" DockPanel.Dock="Left" Fill="Transparent" Width="1"/>
    					<Rectangle x:Name="T1" DockPanel.Dock="Top" Fill="Transparent" Height="1"/>
    					<ContentPresenter x:Name="ContentContainer" HorizontalAlignment="Center" Margin="2,2,2,2" VerticalAlignment="Center"/>
    				</DockPanel>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsPressed" Value="true">
    						<Setter Property="Fill" TargetName="R1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
    						<Setter Property="Fill" TargetName="B1" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
    						<Setter Property="Fill" TargetName="L1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
    						<Setter Property="Fill" TargetName="T1" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
    						<Setter Property="Margin" TargetName="ContentContainer" Value="3,3,1,1"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
    	<Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
    	<Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollViewer}">
    				<Grid SnapsToDevicePixels="true">
    					<Grid.ColumnDefinitions>
    						<ColumnDefinition Width="*"/>
    					</Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="Auto"/>
    						<RowDefinition Height="*"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
    					<Border Grid.Column="0" Grid.Row="1">
    						<ScrollContentPresenter Margin="{TemplateBinding Padding}"/>
    					</Border>
    					<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" Grid.Row="0" Style="{StaticResource MenuScrollButton}">
    						<RepeatButton.Visibility>
    							<MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
    								<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    							</MultiBinding>
    						</RepeatButton.Visibility>
    						<Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    					</RepeatButton>
    					<RepeatButton Grid.Column="0" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" Grid.Row="2" Style="{StaticResource MenuScrollButton}">
    						<RepeatButton.Visibility>
    							<MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
    								<Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    								<Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
    							</MultiBinding>
    						</RepeatButton.Visibility>
    						<Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    					</RepeatButton>
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}" TargetType="{x:Type ContentControl}">
    	<Border BorderBrush="#FF959595" BorderThickness="1" Background="{StaticResource SubMenuBackgroundBrush}">
    		<Grid>
    			<Rectangle Fill="#F1F1F1" HorizontalAlignment="Left" Margin="2" RadiusY="2" RadiusX="2" Width="28"/>
    			<Rectangle Fill="#E2E3E3" HorizontalAlignment="Left" Margin="30,2,0,2" Width="1"/>
    			<Rectangle Fill="White" HorizontalAlignment="Left" Margin="31,2,0,2" Width="1"/>
    			<ContentPresenter Grid.ColumnSpan="2" Margin="1,0"/>
    		</Grid>
    	</Border>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    	<Grid SnapsToDevicePixels="true">
    		<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
    		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
    		<Rectangle x:Name="InnerBorder" Margin="2"/>
    		<DockPanel>
    			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    			<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
    			<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    		</DockPanel>
    		<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
    			<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
    				<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    					<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    						<Grid RenderOptions.ClearTypeHint="Enabled">
    							<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    								<Rectangle Fill="{StaticResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
    							</Canvas>
    							<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
    						</Grid>
    					</ScrollViewer>
    				</ContentControl>
    			</Microsoft_Windows_Themes:SystemDropShadowChrome>
    		</Popup>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="IsSuspendingPopupAnimation" Value="true">
    			<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
    		</Trigger>
    		<Trigger Property="Icon" Value="{x:Null}">
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="true">
    			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
    			<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
    			<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
    		</Trigger>
    		<Trigger Property="IsHighlighted" Value="true">
    			<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
    			<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
    		</Trigger>
    		<Trigger Property="IsKeyboardFocused" Value="true">
    			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
    			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
    		</Trigger>
    		<Trigger Property="IsSubmenuOpen" Value="true">
    			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
    			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
    		</Trigger>
    		<Trigger Property="IsEnabled" Value="false">
    			<Setter Property="Foreground" Value="#FF9A9A9A"/>
    			<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
    		</Trigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    	<Grid SnapsToDevicePixels="true">
    		<Rectangle x:Name="OuterBorder" RadiusY="2" RadiusX="2"/>
    		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
    		<Rectangle x:Name="InnerBorder" Margin="2"/>
    		<DockPanel>
    			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    			<Path x:Name="GlyphPanel" Data="{StaticResource Checkmark}" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
    			<ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    		</DockPanel>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="Icon" Value="{x:Null}">
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="true">
    			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsHighlighted" Value="true">
    			<Setter Property="Stroke" TargetName="Bg" Value="#90717070"/>
    			<Setter Property="Stroke" TargetName="OuterBorder" Value="#50FFFFFF"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50FFFFFF"/>
    		</Trigger>
    		<Trigger Property="IsKeyboardFocused" Value="true">
    			<Setter Property="Stroke" TargetName="Bg" Value="#E0717070"/>
    			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemPressedFill}"/>
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#50747272"/>
    		</Trigger>
    		<Trigger Property="IsEnabled" Value="false">
    			<Setter Property="Foreground" Value="#FF9A9A9A"/>
    			<Setter Property="Fill" TargetName="GlyphPanel" Value="#848589"/>
    		</Trigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
    	<Grid SnapsToDevicePixels="true">
    		<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
    		<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2" Stroke="Transparent" StrokeThickness="1"/>
    		<Grid>
    			<Grid.ColumnDefinitions>
    				<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
    				<ColumnDefinition Width="4"/>
    				<ColumnDefinition Width="*"/>
    				<ColumnDefinition Width="37"/>
    				<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
    				<ColumnDefinition Width="17"/>
    			</Grid.ColumnDefinitions>
    			<ContentPresenter x:Name="Icon" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
    			<Border x:Name="GlyphPanel" BorderBrush="#CDD3E6" BorderThickness="1" Background="#E6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
    				<Path x:Name="Glyph" Data="{StaticResource Checkmark}" Fill="#0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
    			</Border>
    			<ContentPresenter Grid.Column="2" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    			<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" Visibility="Collapsed"/>
    			<Path Grid.Column="5" Data="{StaticResource RightArrow}" Fill="{TemplateBinding Foreground}" Margin="4,0,0,0" VerticalAlignment="Center"/>
    		</Grid>
    		<Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-3">
    			<Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
    				<ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    					<ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
    						<Grid RenderOptions.ClearTypeHint="Enabled">
    							<Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
    								<Rectangle Fill="{StaticResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
    							</Canvas>
    							<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
    						</Grid>
    					</ScrollViewer>
    				</ContentControl>
    			</Microsoft_Windows_Themes:SystemDropShadowChrome>
    		</Popup>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="IsSuspendingPopupAnimation" Value="true">
    			<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
    		</Trigger>
    		<Trigger Property="IsHighlighted" Value="true">
    			<Setter Property="Stroke" TargetName="InnerBorder" Value="#D1DBF4FF"/>
    		</Trigger>
    		<Trigger Property="Icon" Value="{x:Null}">
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="true">
    			<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
    			<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
    		</Trigger>
    		<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
    			<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
    			<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
    		</Trigger>
    		<Trigger Property="IsHighlighted" Value="true">
    			<Setter Property="Fill" TargetName="Bg" Value="{StaticResource MenuItemSelectionFill}"/>
    			<Setter Property="Stroke" TargetName="Bg" Value="#8571CBF1"/>
    		</Trigger>
    		<Trigger Property="IsEnabled" Value="false">
    			<Setter Property="Foreground" Value="#FF9A9A9A"/>
    			<Setter Property="Background" TargetName="GlyphPanel" Value="#EEE9E9"/>
    			<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#DBD6D6"/>
    			<Setter Property="Fill" TargetName="Glyph" Value="#848589"/>
    		</Trigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="MenuItemNoAccessKeyStyle" TargetType="{x:Type MenuItem}">
    	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    	<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    	<Style.Triggers>
    		<Trigger Property="Role" Value="TopLevelHeader">
    			<Setter Property="Padding" Value="7,2,8,3"/>
    			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    		</Trigger>
    		<Trigger Property="Role" Value="TopLevelItem">
    			<Setter Property="Padding" Value="7,2,8,3"/>
    			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    		</Trigger>
    		<Trigger Property="Role" Value="SubmenuHeader">
    			<Setter Property="Padding" Value="2,3,2,3"/>
    			<Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
    		</Trigger>
    		<Trigger Property="Role" Value="SubmenuItem">
    			<Setter Property="Padding" Value="2,3,2,3"/>
    		</Trigger>
    	</Style.Triggers>
    </Style>
    <Style x:Key="UidMenuItemNoAccessKeyStyle" TargetType="{x:Type MenuItem}">
    	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type MenuItem}" >
    				<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
    					<Grid >
							
    						<!-- ContentPresenter to show an Icon if needed -->
	<!-- The Grid is used to hold together columns for an Icon, Content, Glyph checkmark and Arrow to show the next level
							 Size sharing is used in Grid so that the Icon, Content, Arrow for each MenuItem align together -->
    						<Grid.ColumnDefinitions>
    							<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
    							<ColumnDefinition Width="*"/>
    							<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
    							<ColumnDefinition Width="14"/>
    						</Grid.ColumnDefinitions>
							
    						<Path x:Name="Icon" Data="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform" Width="18" Height="18" Margin="4,0,6,0"/>										
			    					
							
							<!-- Glyph is a checkmark if needed for a checkable menu -->
    						<Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
    							<Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
    						</Grid>
							
							<!-- Content for the menu text etc -->
    						<ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="false" ContentSource="Header"/>
							
							<!-- Arrow drawn path which points to the next level of the menu -->
    						<Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
    							<Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
    						</Grid>
							
							<!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
    						<Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="2">
    							<Grid x:Name="SubMenu">
    								<Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
									
									<!-- StackPanel holds children of the menu. This is set bu IsItemsHost=True -->
    								<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
    							</Grid>
    						</Popup>
							
    					</Grid>
    				</Border>
					
					<!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
    				<ControlTemplate.Triggers>
					
						<!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
    					<Trigger Property="Role" Value="TopLevelHeader">
    						<Setter Property="Margin" Value="0,1,0,1"/>
    						<Setter Property="Padding" Value="6,3,6,3"/>
    						<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    						<Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
    						<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
    					</Trigger>
						
						<!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
    					<Trigger Property="Role" Value="TopLevelItem">
    						<Setter Property="Margin" Value="0,1,0,1"/>
    						<Setter Property="Padding" Value="6,3,6,3"/>
    						<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
    					</Trigger>
						
						<!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
    					<Trigger Property="Role" Value="SubmenuHeader">
    						<Setter Property="DockPanel.Dock" Value="Top"/>
    						<Setter Property="Padding" Value="0,2,0,2"/>
    						<Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    					</Trigger>
						
						<!-- Role = SubMenuItem : this is a child menu item which has children-->
    					<Trigger Property="Role" Value="SubmenuItem">
    						<Setter Property="DockPanel.Dock" Value="Top"/>
    						<Setter Property="Padding" Value="0,2,0,2"/>
    						<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
    					</Trigger>
    					<Trigger Property="IsSuspendingPopupAnimation" Value="true">
    						<Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
    					</Trigger>
						
						<!-- If no Icon is present the we collapse the Icon Content -->
    					<Trigger Property="Icon" Value="{x:Null}">
    						<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
    					</Trigger>
						
						<!-- The GlyphPanel contains the CheckMark -->
    					<Trigger Property="IsChecked" Value="true">
    						<Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
    						<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
    					</Trigger>
						
    					<Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
    						<Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
    						<Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
    						<Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"/>
    					</Trigger>
						
    					<Trigger Property="IsHighlighted" Value="true">								
    						<Setter Property="Foreground" Value="{DynamicResource UidIconMouseOverBrush}"/>
    						<Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconMouseOverBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    						<Setter Property="Fill" TargetName="Icon" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidToggleButtonVisibilityStyle" TargetType="{x:Type ToggleButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
    	<Setter Property="Padding" Value="1"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ToggleButton}">
    				<Border x:Name="border" BorderThickness="1" CornerRadius="2" Background="#00000000">
    					<Grid>														
    						<Path x:Name="path" Fill="White" Stretch="Uniform" Data="F1M492,176C489.794,176,488,174.206,488,172C488,169.794,489.794,168,492,168C494.206,168,496,169.794,496,172C496,174.206,494.206,176,492,176 M492,167C487.029,167,483,172,483,172C483,172,487.029,177,492,177C496.971,177,501,172,501,172C501,172,496.971,167,492,167"/>
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    						<Setter Property="Data" TargetName="path"
    							Value="M9,2.5C10.381,2.5 11.5,3.6189999 11.5,5 11.5,6.381 10.381,7.5 9,7.5 7.619,7.5 6.5,6.381 6.5,5 6.5,3.6189999 7.619,2.5 9,2.5z M9,0.99999997C6.7940063,0.99999997 5,2.7940063 5,5 5,7.2059936 6.7940063,9 9,9 11.205994,9 13,7.2059936 13,5 13,2.7940063 11.205994,0.99999997 9,0.99999997z M9,0C13.971008,-2.9802322E-08 18,5 18,5 18,5 13.971008,10 9,10 4.0289917,10 0,5 0,5 0,5 4.0289917,-2.9802322E-08 9,0z"
								 />
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
	<Style x:Key="ToggleButtonVisibleStyle2" TargetType="{x:Type ToggleButton}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
			<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
							<Grid>														
								<Path x:Name="path" Fill="Black" Stretch="Uniform" 
								Data="F1 M 2292.41,1537.01L 2292.41,1536.55C 2298.39,1533.61 2299.18,1527.72 2310.35,1527.72C 2321.52,1527.72 2322.29,1533.61 2328.26,1536.55L 2328.26,1537.01C 2322.37,1540.07 2322.02,1546.19 2310.58,1546.19C 2299.14,1546.2 2298.47,1540.07 2292.41,1537.01 Z M 2295.61,1537C 2300.58,1539.52 2301.13,1544.56 2310.54,1544.55C 2319.94,1544.54 2320.23,1539.52 2325.07,1537L 2325.07,1536.62C 2320.16,1534.2 2319.53,1529.37 2310.35,1529.37C 2301.17,1529.37 2300.52,1534.2 2295.61,1536.62L 2295.61,1537 Z"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="BorderBrush" TargetName="border" Value="White"/>
								<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="#ADADAD"/>
								<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Data" TargetName="path" 
								Value="F1 M 2308.21,1454.34C 2311.98,1454.34 2315.03,1457.3 2315.03,1460.96C 2315.03,1464.61 2311.98,1467.57 2308.21,1467.57C 2304.45,1467.57 2301.39,1464.61 2301.39,1460.96C 2301.39,1457.3 2304.45,1454.34 2308.21,1454.34 Z M 2306.31,1459.68C 2304.63,1459.68 2303.26,1461.01 2303.26,1462.64C 2303.26,1464.27 2304.63,1465.6 2306.31,1465.6C 2307.99,1465.6 2309.36,1464.27 2309.36,1462.64C 2309.36,1461.01 2307.99,1459.68 2306.31,1459.68 Z M 2290.29,1461.01L 2290.29,1460.55C 2296.27,1457.61 2297.05,1451.72 2308.22,1451.72C 2319.4,1451.72 2320.17,1457.61 2326.14,1460.55L 2326.14,1461.01C 2320.24,1464.07 2319.9,1470.19 2308.46,1470.19C 2297.01,1470.2 2296.34,1464.07 2290.29,1461.01 Z M 2293.48,1461C 2298.46,1463.52 2299.01,1468.56 2308.41,1468.55C 2317.81,1468.54 2318.1,1463.52 2322.94,1461L 2322.94,1460.62C 2318.04,1458.2 2317.4,1453.37 2308.22,1453.37C 2299.04,1453.37 2298.4,1458.2 2293.48,1460.62L 2293.48,1461 Z"/>
								<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
								<Setter Property="BorderBrush" TargetName="border" Value="White"/>
								<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	<FontFamily x:Key="UidLightFont">Segoe UI Semilight</FontFamily>
	<Style x:Key="UidDetailsTextBlock" TargetType="{x:Type TextBlock}">
		<Setter Property="FontFamily" Value="{DynamicResource UidLightFont}"/>
		<Setter Property="Padding" Value="5,5,5,6"/>
		<Setter Property="Background" Value="#00000000"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
	</Style>	
	<Style TargetType="{x:Type extToolkit:TimePicker}" x:Key="TimePickerComboBox">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>		
		<Setter Property="FontFamily" Value="Segoe UI Semibold"/>		
		<Setter Property="FontSize" Value="13"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type extToolkit:TimePicker}">
					<Grid>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid Grid.Column="0">
								<extToolkit:DateTimeUpDown
										x:Name="PART_TimeUpDown" 
										AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="1,1,0,1" 
										ContextMenu="{TemplateBinding ContextMenu}" FormatString="{TemplateBinding FormatString}" 
										ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" 
										WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}" 
										Style="{DynamicResource DateTimeUpDownComboBoxStyle}" Format="FullDateTime">
								</extToolkit:DateTimeUpDown>
							</Grid>
							<ToggleButton 
									Grid.Column="1" Focusable="False" Template="{DynamicResource UidComboBoxToggleButton}" x:Name="_timePickerToggleButton" 
									IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"	IsHitTestVisible="False"/>
						</Grid>
                        <Popup IsOpen="{Binding IsChecked, Mode=TwoWay, ElementName=_timePickerToggleButton}" x:Name="Popup" Focusable="False" StaysOpen="False" AllowsTransparency="True" Placement="Bottom" PopupAnimation="Slide">
							<Grid MaxHeight="378" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
								<Border CornerRadius="4" Margin="0,2,0,0" x:Name="DropDownBorder" Background="{DynamicResource UidActiveControlBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}">
    								<ListBox x:Name="PART_TimeListItems" KeyboardNavigation.DirectionalNavigation="Contained" DisplayMemberPath="Display" Style="{DynamicResource SimpleListBox}">
    									<ListBox.ItemContainerStyle>
											<Style TargetType="{x:Type ListBoxItem}">
   												<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
   												<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
												<Setter Property="FontFamily" Value="Segoe UI"/>		
    											<Setter Property="Padding" Value="0,0,0,0"/>
    											<Setter Property="Background" Value="Transparent"/>
												<Setter Property="Foreground" Value="{DynamicResource UidComboBoxForegroundBrush}"/>
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="{x:Type ListBoxItem}">
															<Border x:Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="0,0,0,1" Padding="0,5" Margin="1,0">
    															<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="10,0,0,0"/>
    														</Border>					
    														<ControlTemplate.Triggers>
    															<Trigger Property="Selector.IsSelected" Value="True">
    																<Setter Property="Foreground" Value="{DynamicResource UidComboBoxSelectedForegroundBrush}"/>
																	<Setter Property="FontFamily" Value="Segoe UI SemiBold"/>		
    															</Trigger>
    															<Trigger Property="IsMouseOver" Value="true">
    																<Setter Property="Foreground" Value="{DynamicResource UidComboBoxMouseOverForegroundBrush}"/>
																	<Setter Property="FontFamily" Value="Segoe UI SemiBold"/>		
    															</Trigger>
    															<Trigger Property="IsEnabled" Value="false">
    																<Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
    															</Trigger>
	    													</ControlTemplate.Triggers>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</ListBox.ItemContainerStyle>
									</ListBox>
								</Border>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
                        <Trigger SourceName="Popup" Property="IsOpen" Value="True">
                            <Setter TargetName="PART_TimeUpDown" Property="Background" Value="{DynamicResource UidActiveLabelBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>	
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="DateTimeUpDownComboBoxStyle" TargetType="{x:Type extToolkit:DateTimeUpDown}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
		<Setter Property="HorizontalContentAlignment" Value="Right"/>
		<Setter Property="TextAlignment" Value="Right"/>
		<Setter Property="WatermarkTemplate">
			<Setter.Value>
				<DataTemplate>
					<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type extToolkit:DateTimeUpDown}">
					<Grid>
						<Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{TemplateBinding Background}" Stroke="{DynamicResource NormalBorderBrush}"/>
						<extToolkit:ButtonSpinner 
							x:Name="Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="{TemplateBinding BorderThickness}" 
							Background="{TemplateBinding Background}" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
							Visibility="Collapsed">
						</extToolkit:ButtonSpinner>
						<extToolkit:WatermarkTextBox 
							x:Name="TextBox" AcceptsReturn="False" BorderThickness="0" Background="Transparent" ContextMenu="{TemplateBinding ContextMenu}" 
							Foreground="{DynamicResource UidComboBoxForegroundBrush}" FontWeight="{TemplateBinding FontWeight}" 
							FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
							FontSize="{TemplateBinding FontSize}" FontFamily="Segoe UI SemiBold" 
							HorizontalContentAlignment="Left" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
							MinWidth="20" TextAlignment="Left" 
							TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" 
							TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" 
							Padding="0,0,0,0" Watermark="{TemplateBinding Watermark}" Margin="10,3,0,3"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="UidScrollBarTrackRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Focusable" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Grid>
    					<Rectangle Fill="{TemplateBinding Background}" />
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidScrollBarRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Grid>
    					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
    					<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidScrollBarInvertedStyle" TargetType="{x:Type ScrollBar}">
    	<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    	
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollBar}">
    				<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
    					<Grid.RowDefinitions>
    						<RowDefinition  MaxHeight="10"/>
    						<RowDefinition Height="0.00001*"/>
    						<RowDefinition  MaxHeight="10"/>
    					</Grid.RowDefinitions>						
    					<RepeatButton x:Name="DecreaseRepeat"  Command="ScrollBar.LineUpCommand" BorderBrush="#00000000" Background="#00DDDDDD" Style="{DynamicResource UidScrollBarRepeatButtonStyle}" >
    						<Grid>
    							<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1.6" Data="M 0 8 L 8 0 L 16 8"/>
    						</Grid>
    					</RepeatButton>
						
						<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
    					<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
    						<Track.Thumb >
    							<Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" VerticalAlignment="Center" Margin="0,-4"/>
    						</Track.Thumb>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton x:Name="PageUp" Background="{TemplateBinding Property=Foreground}" Style="{DynamicResource UidScrollBarTrackRepeatButton}" Command="ScrollBar.PageDownCommand" Width="2" HorizontalAlignment="Center"/>
    						</Track.IncreaseRepeatButton>
    						<Track.DecreaseRepeatButton>
    							<RepeatButton x:Name="PageDown" Background="{TemplateBinding Property=Foreground}" Style="{DynamicResource UidScrollBarTrackRepeatButton}" Command="ScrollBar.PageUpCommand" HorizontalAlignment="Center" Width="2"/>
    						</Track.DecreaseRepeatButton>
    					</Track>
						
    					<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Command="ScrollBar.LineDownCommand" Background="#00000000" BorderBrush="#00000000" Style="{DynamicResource UidScrollBarRepeatButtonStyle}">
    						<Grid>
    							<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1.6"  Data="M 0 0 L 8 8 L 16 0"/>
    						</Grid>
    					</RepeatButton>
    				</Grid>
					
					<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="Orientation" Value="Horizontal">

							<!-- Rotate the ScrollBar from Vertical to Horizontal -->
    						<Setter Property="LayoutTransform" TargetName="GridRoot">
    							<Setter.Value>
    								<RotateTransform Angle="-90"/>
    							</Setter.Value>
    						</Setter>
							
							<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
    						<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
							<!-- Change the commands to do Horizontal commands -->
    						<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
    						<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
    						<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
    						<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
    					</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
							<Setter Property="Stroke" TargetName="DecreaseArrow" Value="{DynamicResource UidIconMouseOverBrush}"/>
							<Setter Property="Stroke" TargetName="IncreaseArrow" Value="{DynamicResource UidIconMouseOverBrush}"/>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidToggleButtonMultiTriggerInvertedStyle" TargetType="{x:Type ToggleButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    	<Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
    	<Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="{DynamicResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="{DynamicResource UidButtonCornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" Background="#00000000">
    					<Grid>														
    						<Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>							
    					</Grid>
    				</Border>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
    						<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
    					</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="false"/>
								<Condition Property="IsChecked" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="#ADADAD"/>
    						<Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
    						<Setter Property="BorderBrush" TargetName="border" Value="White"/>-->
						</MultiTrigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
	<Style x:Key="UidToggleButtonAutoScale2DInvertedStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource UidToggleButtonInvertedStyle}">
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="False">
    			<Setter Property="ToolTipService.ToolTip" Value="Autoscale each image"/>
    		</Trigger>
    		<Trigger Property="IsChecked" Value="True">
    			<Setter Property="ToolTipService.ToolTip" Value="Scale to selected image"/>
    		</Trigger>
    	</Style.Triggers>
	</Style>
    <Style x:Key="ToggleButtonThreeStateStyle1" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Aqua"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Simple ScrollViewer with Horizontal ScrollBar on top -->
    <Style x:Key="SimpleScrollViewerTopScrollBarStyle" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="1" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="0" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TabControlNormalBorderBrush" Color="#8C8E94"/>
    <Style x:Key="TabControlTopScrollBarStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="4,4,4,4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer HorizontalScrollBarVisibility="Auto" Grid.Column="0" Grid.Row="0" VerticalScrollBarVisibility="Hidden" Margin="2,2,2,0" Style="{DynamicResource SimpleScrollViewerTopScrollBarStyle}">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        </ScrollViewer>
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabControlNoHeaderTopScrollBarStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="4,4,4,4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}"/>
        <Setter Property="Background" Value="#F9F9F9"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <ScrollViewer HorizontalScrollBarVisibility="Auto" Grid.Column="0" Grid.Row="0" VerticalScrollBarVisibility="Hidden" Margin="2,2,2,0" Style="{DynamicResource SimpleScrollViewerTopScrollBarStyle}" Height="0">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
                        </ScrollViewer>
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidSliderArrowsStyle" TargetType="{x:Type Slider}">
    	<Setter Property="Background" Value="{DynamicResource LightBrush}"/>
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="MinWidth" Value="{DynamicResource UidSliderArrowStyleMinWidth}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Slider}">
    				<Grid x:Name="GridRoot">
    					<Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderSmallColumnWidth}"/>
                            <ColumnDefinition Width="{DynamicResource UidSliderLargeColumnWidth}"/>
                        </Grid.ColumnDefinitions>
    					<Grid.RowDefinitions>
    						<RowDefinition Height="Auto"/>
                            <RowDefinition Height="{DynamicResource UidSliderRowHeight}" MinHeight="{TemplateBinding MinHeight}"/>
    						<RowDefinition Height="Auto"/>
    					</Grid.RowDefinitions>
						
						<!-- TickBar shows the ticks for Slider -->
    					<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" Grid.ColumnSpan="1" Margin="0,0,0,31" Grid.Row="1" Grid.Column="2"/>
                        <Border Grid.Row="1" x:Name="Border" Height="{DynamicResource UidSliderBorderHeight}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Property=Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" Grid.ColumnSpan="1" Grid.Column="2" VerticalAlignment="Stretch" />
    					<RepeatButton Grid.ColumnSpan="1" Grid.Column="4"
    						Grid.Row="1" HorizontalAlignment="Stretch" x:Name="incRep" Content="{DynamicResource IconFRight}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.IncreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>
						
						<!-- The Track lays out the repeat buttons and thumb -->
    					<Track Grid.Row="1" x:Name="PART_Track" Grid.ColumnSpan="1" Grid.Column="2">
    						<Track.Thumb>
                                <Thumb x:Name="thumb" Style="{DynamicResource UidThumbStyle}" Background="{TemplateBinding Background}" VerticalAlignment="Stretch" Width="{DynamicResource UidSliderThumbWidthHeight}" Height="{DynamicResource UidSliderThumbWidthHeight}"/>
    						</Track.Thumb>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
    						</Track.IncreaseRepeatButton>
    						<Track.DecreaseRepeatButton>
    							<RepeatButton Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
    						</Track.DecreaseRepeatButton>
    					</Track>
    					<RepeatButton Grid.ColumnSpan="1"
    						Grid.Row="1" VerticalAlignment="Stretch" x:Name="decRep" Content="{DynamicResource IconFLeft}" Style="{DynamicResource UidSliderRepeatButtonStyle}"
    						Command="Slider.DecreaseLarge" Background="{TemplateBinding Background}" Width="{DynamicResource UidSliderRepeatButtonWidth}" Height="{DynamicResource UidSliderRepeatButtonHeight}"/>
						
    					<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}" Grid.ColumnSpan="5" Margin="0,0,0,-4"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsMouseOver" Value="True">
    						<Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
    						<Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconMouseOverBrush}"/>
    						<Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconMouseOverBrush}"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="TopLeft">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="BottomRight">
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="TickPlacement" Value="Both">
    						<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
    						<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter Property="Background" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="Border"/>
    						<Setter Property="BorderBrush" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="Border"/>		
							<Setter Property="Background" TargetName="incRep" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    						<Setter Property="Background" TargetName="decRep" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
    						<Setter Property="Background" TargetName="thumb" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>				
    					</Trigger>
						
						<!-- Use a rotation to create a Vertical Slider form the default Horizontal -->
    					<Trigger Property="Orientation" Value="Vertical">
    						<Setter Property="LayoutTransform" TargetName="GridRoot">
    							<Setter.Value>
    								<RotateTransform Angle="-90"/>
    							</Setter.Value>
    						</Setter>
							<!-- Track rotates itself based on orientation so need to force it back -->
    						<Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
    					</Trigger>
						
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="UidToggleButtonVectorTextStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="1" CornerRadius="2" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                        <Grid Margin="2">
                            <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItemCustomContentStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}" >
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header"/>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="Padding" Value="6,3,6,3"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource UidIconMouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="MenuItemInvertedVectorIconControlTemplate" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="{StaticResource UidButtonWidth}" Height="{StaticResource UidButtonHeight}" Padding="{DynamicResource UidButtonPadding}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                <Grid>
                    <Path x:Name="path" Data="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>
                </Grid>
            </Border>

            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="7" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right" VerticalOffset="-1">
                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle Fill="{DynamicResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </ContentControl>
                </Microsoft_Windows_Themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}"/>
            <Trigger Property="IsChecked" Value="true"/>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <Trigger Property="IsKeyboardFocused" Value="true"/>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="MenuItemVectorIconControlTemplate" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="{StaticResource UidButtonWidth}" Height="{StaticResource UidButtonHeight}" Padding="{DynamicResource UidButtonPadding}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                <Grid>
                    <Path x:Name="path" Data="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform"/>
                </Grid>
            </Border>

            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle Fill="{DynamicResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </ContentControl>
                </Microsoft_Windows_Themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}"/>
            <Trigger Property="IsChecked" Value="true"/>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <Trigger Property="IsKeyboardFocused" Value="true"/>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidButtonPathPressedBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="MenuItemVectorIconInvertedControlTemplate" TargetType="{x:Type MenuItem}">
        <Grid>
            <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="{StaticResource UidButtonWidth}" Height="{StaticResource UidButtonHeight}" Padding="{DynamicResource UidButtonPadding}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                <Grid>
                    <Path x:Name="path" Data="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>
                </Grid>
            </Border>

            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle Fill="{DynamicResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </ContentControl>
                </Microsoft_Windows_Themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}"/>
            <Trigger Property="IsChecked" Value="true"/>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <Trigger Property="IsKeyboardFocused" Value="true"/>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="MenuItemInvertedVectorIconTopControlTemplate" TargetType="{x:Type MenuItem}">
        <Grid Margin="2,0" >
            <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="{StaticResource UidButtonWidth}" Height="{StaticResource UidButtonHeight}" Padding="{DynamicResource UidButtonPadding}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                <Grid>
                    <Path x:Name="path" Data="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>
                </Grid>
            </Border>

            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Top" VerticalOffset="1">
                <Microsoft_Windows_Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <ContentControl x:Name="SubMenuBorder" IsTabStop="false" Template="{DynamicResource {ComponentResourceKey ResourceId=SubmenuContent, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle Fill="{DynamicResource SubMenuBackgroundBrush}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </ContentControl>
                </Microsoft_Windows_Themes:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}"/>
            <Trigger Property="IsChecked" Value="true"/>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true"/>
            <Trigger Property="IsKeyboardFocused" Value="true"/>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="BorderThickness" TargetName="border" Value="{DynamicResource UidButtonPressedBorderThickness}"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{DynamicResource UidInvertedButtonBackgroundPressedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="UidComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="FontSize" Value="{DynamicResource UidComboBoxFontSize}"/>
        <Setter Property="Height" Value="{DynamicResource UidComboBoxHeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButtonControlTemplate}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <ContentPresenter HorizontalAlignment="Left" Margin="10,3,10,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{DynamicResource UidComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource UidActiveControlBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                                <ScrollViewer Margin="0" Style="{DynamicResource SimpleScrollViewer}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButtonControlTemplate" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="{DynamicResource UidComboBoxButtonWidth}"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="0" RadiusY="0" Fill="{DynamicResource UidActiveControlBackgroundBrush}" Stroke="{DynamicResource UidBorderBrush}"/>
            <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="5" RadiusY="5"/>
            <!--<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>-->
            <Path x:Name="Arrow" Data="F1M241,124L237,128L233,124L230,124L237,131L244,124z" Fill="{DynamicResource UidMarkedTextBackgroundBrush}" Height="21" Stretch="Fill" Width="41" HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource UidActiveControlBackgroundBrush}" TargetName="Rectangle"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Fill" TargetName="Rectangle" Value="{DynamicResource UidActiveLabelBackgroundBrush}"/>
                <Setter Property="RenderTransform" TargetName="Arrow">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Rectangle"/>
                <!--<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>-->
                <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                <Setter Property="Fill" Value="{DynamicResource UidDisabledLabelForegroundBrush}" TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxToggleButtonInvertedControlTemplate" TargetType="{x:Type ToggleButton}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{DynamicResource UidComboBoxButtonWidth}"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <!--<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>-->
            <Path x:Name="Arrow" Data="F1M241,124L237,128L233,124L230,124L237,131L244,124z" Fill="{TemplateBinding Foreground}" Height="21" Stretch="Fill" Width="41" HorizontalAlignment="Center" Grid.Column="0" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource UidIconPressedBrush}" TargetName="Arrow"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource UidIconPressedBrush}"/>
                <Setter Property="RenderTransform" TargetName="Arrow">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>-->
                <Setter Property="Foreground" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                <Setter Property="Fill" Value="{DynamicResource UidIconInvertedDisabledBrush}" TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ToggleButtonEyeVisibleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="{StaticResource UidButtonWidth}"/>
        <Setter Property="Height" Value="{StaticResource UidButtonHeight}"/>
        <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                        <Grid>
                            <Path x:Name="path" Fill="White" Stretch="Uniform" 
								Data="F1 M 2292.41,1537.01L 2292.41,1536.55C 2298.39,1533.61 2299.18,1527.72 2310.35,1527.72C 2321.52,1527.72 2322.29,1533.61 2328.26,1536.55L 2328.26,1537.01C 2322.37,1540.07 2322.02,1546.19 2310.58,1546.19C 2299.14,1546.2 2298.47,1540.07 2292.41,1537.01 Z M 2295.61,1537C 2300.58,1539.52 2301.13,1544.56 2310.54,1544.55C 2319.94,1544.54 2320.23,1539.52 2325.07,1537L 2325.07,1536.62C 2320.16,1534.2 2319.53,1529.37 2310.35,1529.37C 2301.17,1529.37 2300.52,1534.2 2295.61,1536.62L 2295.61,1537 Z"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidInvertedButtonPathPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="path" 
								Value="F1 M 2308.21,1454.34C 2311.98,1454.34 2315.03,1457.3 2315.03,1460.96C 2315.03,1464.61 2311.98,1467.57 2308.21,1467.57C 2304.45,1467.57 2301.39,1464.61 2301.39,1460.96C 2301.39,1457.3 2304.45,1454.34 2308.21,1454.34 Z M 2306.31,1459.68C 2304.63,1459.68 2303.26,1461.01 2303.26,1462.64C 2303.26,1464.27 2304.63,1465.6 2306.31,1465.6C 2307.99,1465.6 2309.36,1464.27 2309.36,1462.64C 2309.36,1461.01 2307.99,1459.68 2306.31,1459.68 Z M 2290.29,1461.01L 2290.29,1460.55C 2296.27,1457.61 2297.05,1451.72 2308.22,1451.72C 2319.4,1451.72 2320.17,1457.61 2326.14,1460.55L 2326.14,1461.01C 2320.24,1464.07 2319.9,1470.19 2308.46,1470.19C 2297.01,1470.2 2296.34,1464.07 2290.29,1461.01 Z M 2293.48,1461C 2298.46,1463.52 2299.01,1468.56 2308.41,1468.55C 2317.81,1468.54 2318.1,1463.52 2322.94,1461L 2322.94,1460.62C 2318.04,1458.2 2317.4,1453.37 2308.22,1453.37C 2299.04,1453.37 2298.4,1458.2 2293.48,1460.62L 2293.48,1461 Z"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>-->
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonNeonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Margin="0,0,0,0" Background="Black">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="40"/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="40"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" BorderBrush="{DynamicResource SolidBorderBrush}" CornerRadius="0" MinHeight="40" Grid.ColumnSpan="5">
                            <Label HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding Content}" Foreground="White"/>
                        </Border>
                        <Border x:Name="marker"  Height="4" VerticalAlignment="Top" Margin="10,0" Visibility="Hidden" CornerRadius="0" Grid.Column="1" Grid.ColumnSpan="3">
                            <Border.Effect>
                                <BlurEffect Radius="0"/>
                            </Border.Effect>
                        </Border>
                        <Rectangle Fill="{DynamicResource LightBrush}" StrokeThickness="0" HorizontalAlignment="Left" Width="1" Height="10" VerticalAlignment="Top" Visibility="Collapsed" Grid.ColumnSpan="5"/>
                        <Rectangle Fill="{DynamicResource LightBrush}" StrokeThickness="0" HorizontalAlignment="Right" Width="1" Height="10" VerticalAlignment="Top" Grid.ColumnSpan="5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="#FFFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter Property="Visibility" TargetName="marker" Value="Visible"/>
                            <Setter Property="Foreground" TargetName="ContentSite" Value="{DynamicResource NeonBrush}"/>
                            <Setter Property="Background" TargetName="marker" Value="{DynamicResource NeonBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"  TargetName="ContentSite" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LabelWithTrailTextStyle" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Tag}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidTextBoxWithTrailTextStyle" TargetType="{x:Type TextBox}"  BasedOn="{StaticResource UidTextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="{DynamicResource UidTextBoxBackground}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="{DynamicResource UidTextBoxPadding}" CornerRadius="{DynamicResource UidTextBoxCornerRadius}">
                            <!--<Border x:Name="Border" Background="{DynamicResource UidDisabledLabeBackgroundBrush}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">-->
                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <ScrollViewer Margin="{DynamicResource UidTextBoxScrollViewerMargin}" x:Name="PART_ContentHost" BorderBrush="Black"  />
                                <ContentPresenter Content="{TemplateBinding Tag}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="UidTextBoxSearchStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <!--<Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>-->
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="FontSize" Value="{DynamicResource UidTextBoxFontSize}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource UidMarkedTextBackgroundBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource UidActiveLabelForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <Path x:Name="icon" Visibility="Collapsed" Opacity="0.5" Grid.Column="0" Data="F1 M 59.1346,61.0285C 57.6701,62.493 55.2958,62.4931 53.8313,61.0286L 34.6713,41.8687C 31.2449,43.858 27.2453,45 22.9733,45C 10.2856,45 0,34.9265 0,22.5C 0,10.0737 10.2856,3.05176e-005 22.9733,3.05176e-005C 35.6609,3.05176e-005 45.9465,10.0737 45.9465,22.5C 45.9465,28.0577 43.8891,33.1447 40.4796,37.0703L 59.1346,55.7253C 60.5991,57.1898 60.5991,59.5641 59.1346,61.0285 Z M 29.0317,36.2263C 31.3819,35.1874 33.4151,33.5627 34.9464,31.5372C 36.8463,29.0239 37.9732,25.8936 37.9732,22.5001C 37.9732,14.2159 31.2574,7.50009 22.9732,7.50009C 14.689,7.50009 7.97322,14.2159 7.97322,22.5001C 7.97322,30.7844 14.6889,37.5001 22.9732,37.5001C 25.1292,37.5001 27.1789,37.0453 29.0317,36.2263 Z" 
                              Fill="{DynamicResource UidIconActiveBrush}" Stretch="Uniform" Height="25" Width="25" Margin="5,0,-5,0"/>
                        
                        <Border Grid.Column="1" x:Name="Border" Background="{DynamicResource UidTextBoxBackground}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="0" Padding="{DynamicResource UidTextBoxPadding}" CornerRadius="{DynamicResource UidTextBoxCornerRadius}">
                            <!--<Border x:Name="Border" Background="{DynamicResource UidDisabledLabeBackgroundBrush}" BorderBrush="{DynamicResource UidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">-->
                            <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                            <ScrollViewer Margin="{DynamicResource UidTextBoxScrollViewerMargin}" x:Name="PART_ContentHost" BorderBrush="Black"  />
                        </Border>
                        <Border Grid.Column="1" x:Name="maskGrid" Visibility="Collapsed" Padding="{DynamicResource UidTextBoxPadding}" Opacity="0.5">
                            <Label Margin="{DynamicResource UidTextBoxScrollViewerMargin}" Content="Search" Padding="{DynamicResource UidTextBoxPadding}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidDisabledLabelForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="Background" Value="{DynamicResource UidDisabledLabeBackgroundBrush}" TargetName="Border"/>
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource UidReadOnlyTextForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" Value="Visible" TargetName="maskGrid"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="icon"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Resource dictionary entries should be defined here. -->
<!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
	
</ResourceDictionary>