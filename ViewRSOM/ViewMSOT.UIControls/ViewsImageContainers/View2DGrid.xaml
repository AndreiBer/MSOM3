<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:local="clr-namespace:ViewMSOT.UIControls"
	xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:Xvue_MSOT_ViewModels_Imaging="clr-namespace:Xvue.MSOT.ViewModels.Imaging;assembly=Xvue.MSOT.ViewModels"
	xmlns:Xvue_Framework_Views_WPF_Converters="clr-namespace:Xvue.Framework.Views.WPF.Converters;assembly=Xvue.Framework.Views.WPF"
    xmlns:Xvue_MSOT_EnumDescriptions_Imaging="clr-namespace:Xvue.MSOT.EnumDescriptions.Imaging;assembly=Xvue.MSOT"
    xmlns:extToolkit="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
	mc:Ignorable="d"
	x:Class="ViewMSOT.UIControls.View2DGrid"
	x:Name="UserControl"
	d:DesignWidth="405" d:DesignHeight="398" Loaded="UserControl_Loaded" DataContextChanged="UserControl_DataContextChanged" Focusable="True">
	<UserControl.Resources>
        <Xvue_Framework_Views_WPF_Converters:DoubleToPoint3DConverter x:Key="DoubleToPoint3DConverter"/>
		<Xvue_Framework_Views_WPF_Converters:BooleanToVisibleConverter x:Key="BooleanToVisibleConverter"/>
        <Xvue_Framework_Views_WPF_Converters:InvertedBooleanToVisibleConverter x:Key="InvertedBooleanToVisibleConverter"/>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Xvue_MSOT_EnumDescriptions_Imaging:EnumConversionGridStyle x:Key="EnumConversionGridStyle"/>
        <Xvue_MSOT_EnumDescriptions_Imaging:EnumConversionGridStyle x:Key="EnumConversionGridStyleDataSource" d:IsDataSource="True"/>
        <Xvue_MSOT_EnumDescriptions_Imaging:EnumConversionROIsStyle x:Key="EnumConversionROIsStyle"/>
        <Xvue_MSOT_EnumDescriptions_Imaging:EnumConversionROIsStyle x:Key="EnumConversionROIsStyleDataSource" d:IsDataSource="True"/>
        <Xvue_MSOT_ViewModels_Imaging:ViewModelPreview x:Key="ViewModelPreviewDataSource" d:IsDataSource="True"/>
<!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
		<Style x:Key="PolygonControlThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Grid Margin="0,0,0,0" x:Name="Grid" Visibility="Visible" Opacity="0.45">
							<Ellipse HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Stroke="{DynamicResource NormalBorderBrush}" Fill="#FFCA1C00"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Fill" TargetName="Rectangle" Value="#FFCA1C00"/>
								<Setter Property="Visibility" TargetName="Grid" Value="Visible"/>
								<Setter Property="Opacity" TargetName="Grid" Value="1"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False"/>
							<Trigger Property="IsDragging" Value="True"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsDragging" Value="False"/>
				<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
			</Style.Triggers>
		</Style>
        <Style x:Key="AnchorControlThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid Margin="0,0,0,0" x:Name="Grid" Visibility="Visible" Opacity="0.45">
                            <Ellipse HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Stroke="{DynamicResource NormalBorderBrush}" Fill="#FF0027FF"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Fill" TargetName="Rectangle" Value="#FFCA1C00"/>
                                <Setter Property="Visibility" TargetName="Grid" Value="Visible"/>
                                <Setter Property="Opacity" TargetName="Grid" Value="1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False"/>
                            <Trigger Property="IsDragging" Value="True"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsDragging" Value="False"/>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

	<Grid Background="Black" d:DataContext="{Binding Mode=OneWay, Source={StaticResource ViewModelPreviewDataSource}}" KeyDown="Grid_KeyDown">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="0.894*"/>
			<ColumnDefinition Width="Auto"/>							
		</Grid.ColumnDefinitions>

        <local:ViewImage x:Name="imageViewXY" Grid.ColumnSpan="3" Grid.Row="1"
                                Zoom="{Binding ImageProperties.CurrentZoom, Mode=TwoWay}" 
                                ActiveImageSource="{Binding ReconstructedImage, Mode=OneWay}"
                                ActiveImageTransform="{Binding ImageProperties.ImageTransform, Mode=OneWay}"
                                WCenter="{Binding ImageProperties.VolumeZoomCenter3D, Converter={StaticResource DoubleToPoint3DConverter}, ConverterParameter=X, Mode=TwoWay}"
                                HCenter="{Binding ImageProperties.VolumeZoomCenter3D, Converter={StaticResource DoubleToPoint3DConverter}, ConverterParameter=Y, Mode=TwoWay}"
                                IsROIDrawEnabled="True"
                                RulerMeasurementTools="{Binding ImageProperties.RulersViewingPlanes.RulerMeasurementToolsXY}"
                                Region2DAllLayers="{Binding ImageProperties.DrawingRegions2D.RegionDrawings, Mode=OneWay}"
                                MinimumZoomAllowed="{Binding ImageProperties.MinimumZoomAllowedXY, Mode=TwoWay}"
                                ImageHeight="{Binding ImageProperties.HeightInPixels, Mode=OneWay}"
                                ImageWidth="{Binding ImageProperties.WidthInPixels, Mode=OneWay}"
                                RoiLowX="{Binding ImageProperties.ImageLowRoiDrawLimitX, Mode=OneWay}"
                                RoiHighX="{Binding ImageProperties.ImageHighRoiDrawLimitX, Mode=OneWay}"
                                RoiLowY="{Binding ImageProperties.ImageLowRoiDrawLimitY, Mode=OneWay}"
                                RoiHighY="{Binding ImageProperties.ImageHighRoiDrawLimitY, Mode=OneWay}"
                                RoiYOffset="{Binding ImageProperties.ParentPropertiesService.AxialOffsetValue}"
                                CrosshairVisibility="Collapsed"/>

		<ScrollViewer x:Name="imageDetailsScrollViewer" Grid.ColumnSpan="2" Grid.Column="0" MinWidth="30" Grid.Row="2" ScrollViewer.VerticalScrollBarVisibility="Auto" Visibility="Collapsed">
			<StackPanel >
                <TextBlock x:Name="imageDetails" Text="{Binding ImageProperties.ImageDetails}" TextWrapping="WrapWithOverflow"  HorizontalAlignment="Center" VerticalAlignment="Center" MinWidth="30">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="Foreground" Value="White"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ImageProperties.ParentVisualization.SelectedVisibleSlice.IsImageTagged}" Value="True">
                                    <Setter Property="Foreground" Value="Red"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>                    
                </TextBlock>
			</StackPanel>
       	</ScrollViewer>
	</Grid>
</UserControl>