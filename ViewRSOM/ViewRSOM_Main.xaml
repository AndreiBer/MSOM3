<Window 
    x:Class="ViewRSOM.ViewRSOM_Main"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:exceedToolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:local="clr-namespace:ViewRSOM"
    xmlns:Converters="clr-namespace:ViewRSOM.Converters"
    xmlns:System="clr-namespace:System;assembly=mscorlib" x:Name="window"
    mc:Ignorable="d" d:DesignWidth="1392"
    Background="White" Title="ViewRSOMClinical"   
    Closing="Window_Closing"  Loaded="Window_Loaded" WindowState="Maximized" WindowStyle="None" Closed="Window_Closed" PreviewKeyDown="Window_PreviewKeyDown" SizeChanged="window_SizeChanged">
    <Window.Resources>
        <!--<Xvue_MSOT_ViewModels:MSOTSystem x:Key="MSOTSystemDataSource" d:IsDataSource="True"/>-->
        <!--<Converters:TaskbarItemBooleanToProgressStateConverter x:Key="TaskbarItemBooleanToProgressStateConverter"/>-->
        <Style x:Key="ToggleButtonPowerStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderThickness="1" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                            <Grid>
                                <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="White" Stretch="Uniform"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconDisabledBrush}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="Lime"/>
                                <Setter Property="Fill" TargetName="path" Value="Lime"/>
                                <Setter Property="Effect" TargetName="border">
                                    <Setter.Value>
                                        <BlurEffect Radius="2.5"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Converters:BooleanToVisibleConverter x:Key="BooleanToVisibilityConverter"/>-->
        <Style x:Key="ButtonStyleControlBar" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderThickness="1" Padding="{DynamicResource UidIconPadding}" Background="#00000000">
                            <Grid>
                                <Path x:Name="path" Data="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Fill="{TemplateBinding Foreground}" Stretch="Uniform"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsDefaulted" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                                <Setter Property="BorderThickness" TargetName="border" Value="2,2,1,1"/>
                                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconPressedBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                                <Setter Property="Fill" TargetName="path" Value="{DynamicResource UidIconInvertedDisabledBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Converters:DoubleToStringConverter x:Key="DoubleToStringConverter"/>-->
        <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Border x:Name="PART_Track" Background="White" BorderBrush="#FF9D9D9D" BorderThickness="1">
                                <Rectangle Fill="White" Margin="0"/>
                            </Border>

                            <!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
                            <!--<Border HorizontalAlignment="Left" x:Name="PART_Indicator" CornerRadius="2" Margin="2,3" Background="{DynamicResource NeonBrush}">
							<Border.Effect>
								<BlurEffect Radius="3" KernelType="Gaussian"/>
							</Border.Effect>
						</Border>-->
                            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" >
                                <Grid x:Name="Foreground">
                                    <Border x:Name="Indicator" Background="#FF838282">
                                        <Border.Effect>
                                            <BlurEffect Radius="0" KernelType="Gaussian"/>
                                        </Border.Effect>
                                    </Border>
                                    <Grid x:Name="Animation" ClipToBounds="true">
                                        <Rectangle x:Name="PART_GlowRect" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="80" Fill="LightGray"/>
                                    </Grid>
                                </Grid>
                            </Decorator>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="false">
                                <Setter Property="Visibility" TargetName="Animation" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="childWindowCloseButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Button Style="{DynamicResource UidButtonStyle}" Content="{DynamicResource IconCut}"></Button>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="BusyIndicatorNoRadiusStyle" TargetType="{x:Type exceedToolkit:BusyIndicator}">
            <Setter Property="BusyContent" Value="Please wait..."/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="OverlayStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Rectangle}">
                        <Setter Property="Fill" Value="White"/>
                        <Setter Property="Opacity" Value="0.5"/>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="ProgressBarStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ProgressBar}">
                        <Setter Property="IsIndeterminate" Value="True"/>
                        <Setter Property="Height" Value="15"/>
                        <Setter Property="Margin" Value="8,0,8,8"/>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="DisplayAfter" Value="0:0:0.1"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type exceedToolkit:BusyIndicator}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="VisibilityStates">
                                    <VisualState x:Name="Hidden">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="busycontent">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="overlay">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Visible">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="busycontent">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="overlay">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="BusyStatusStates">
                                    <VisualState x:Name="Idle">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="content">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <System:Boolean>True</System:Boolean>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Busy">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames BeginTime="0" Duration="0:0:0.001" Storyboard.TargetProperty="(UIElement.IsEnabled)" Storyboard.TargetName="content">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <System:Boolean>False</System:Boolean>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ContentControl x:Name="content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsTabStop="False" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Rectangle x:Name="overlay" Style="{TemplateBinding OverlayStyle}"/>
                            <ContentPresenter x:Name="busycontent">
                                <ContentPresenter.Content>
                                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Border BorderThickness="1" Background="White" CornerRadius="0">
                                            <Border.BorderBrush>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                                                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                                                    <GradientStop Color="#FF718597" Offset="0.375"/>
                                                    <GradientStop Color="#FF617584" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>
                                            <Border CornerRadius="1.5" Margin="1">
                                                <Border.Background>
                                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                        <GradientStop Color="#FFF6F8F9" Offset="0.02"/>
                                                        <GradientStop Color="#FFB8B8B8" Offset="0.996"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                                <Grid MinWidth="150">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>
                                                    <ContentPresenter ContentTemplate="{TemplateBinding BusyContentTemplate}" Content="{TemplateBinding BusyContent}" Margin="8"/>
                                                    <ProgressBar Grid.Row="1" Height="20" Style="{TemplateBinding ProgressBarStyle}" Margin="8"/>
                                                </Grid>
                                            </Border>
                                        </Border>
                                    </Grid>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="BusyIndicatorChildWindowStyle" TargetType="{x:Type exceedToolkit:ChildWindow}">
            <Setter Property="MinWidth" Value="140"/>
            <Setter Property="MinHeight" Value="40"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type exceedToolkit:ChildWindow}">
                        <Grid x:Name="PART_Root">
                            <Grid.Resources>
                                <Style x:Key="FocusVisualStyle" TargetType="{x:Type Control}">
                                    <Setter Property="BorderBrush" Value="Black"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Margin" Value="-1"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Fill="{TemplateBinding Background}" Margin="{TemplateBinding Margin}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" StrokeDashArray="4 3"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Grid.Resources>
                            <Grid x:Name="PART_WindowRoot" HorizontalAlignment="Left" Height="{TemplateBinding Height}" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" VerticalAlignment="Top" Width="{TemplateBinding Width}">
                                <exceedToolkit:WindowControl x:Name="PART_WindowControl"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    CloseButtonVisibility="{TemplateBinding CloseButtonVisibility}"
                                    CaptionForeground="{TemplateBinding CaptionForeground}"
                                    Caption="{TemplateBinding Caption}"
                                    Content="{TemplateBinding Content}"
                                    CaptionShadowBrush="{TemplateBinding CaptionShadowBrush}"
                                    CloseButtonStyle="{TemplateBinding CloseButtonStyle}"
                                    CaptionIcon="{TemplateBinding CaptionIcon}"
                                    Height="{TemplateBinding Height}"
                                    IsActive="{TemplateBinding IsActive}"
                                    WindowStyle="{TemplateBinding WindowStyle}"
                                    WindowBackground="{TemplateBinding WindowBackground}"
                                    WindowOpacity="{TemplateBinding WindowOpacity}"
                                    WindowInactiveBackground="{TemplateBinding WindowInactiveBackground}"
                                    WindowBorderBrush="{TemplateBinding WindowBorderBrush}"
                                    Width="{TemplateBinding Width}"
                                    WindowBorderThickness="{TemplateBinding WindowBorderThickness}"/>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Closed">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.BasedOn>
                <Style TargetType="{x:Type exceedToolkit:WindowControl}">
                    <Setter Property="CloseButtonStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="ToolTip" Value="Close"/>
                                <Setter Property="Content">
                                    <Setter.Value>
                                        <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_normal.png"/>
                                    </Setter.Value>
                                </Setter>
                                <Style.BasedOn>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="Margin" Value="0,-1,0,0"/>
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Button}">
                                                    <Border x:Name="outerBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                                        <Image Source="{TemplateBinding Content}">
                                                            <Image.Style>
                                                                <Style TargetType="{x:Type Image}">
                                                                    <Setter Property="Stretch" Value="None"/>
                                                                    <Setter Property="UseLayoutRounding" Value="True"/>
                                                                    <Setter Property="RenderOptions.EdgeMode" Value="Aliased"/>
                                                                    <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                                                                </Style>
                                                            </Image.Style>
                                                        </Image>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Style.BasedOn>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_inactive.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_hover.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_pressed.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="Name" Value="PART_ToolWindowCloseButton">
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_toolwindow_normal.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Name, RelativeSource={RelativeSource Self}}" Value="PART_ToolWindowCloseButton"/>
                                            <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_toolwindow_inactive.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Name" Value="PART_ToolWindowCloseButton"/>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_toolwindow_hover.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="Name" Value="PART_ToolWindowCloseButton"/>
                                            <Condition Property="IsPressed" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Content">
                                            <Setter.Value>
                                                <BitmapImage BaseUri="Xceed.Wpf.Toolkit/Themes/Generic/Common.xaml" UriSource="Images/close_toolwindow_pressed.png"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiTrigger>
                                </Style.Triggers>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" Value="#00000000"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="WindowStyle" Value="None"/>
                    <Setter Property="CaptionForeground" Value="Black"/>
                    <Setter Property="WindowBorderBrush" Value="#00000000"/>
                    <Setter Property="WindowBackground" Value="Transparent"/>
                    <Setter Property="WindowBorderThickness" Value="0"/>
                    <Setter Property="WindowInactiveBackground" Value="Transparent"/>
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
    </Window.Resources>


    <!--<Grid x:Name="LayoutGrid" d:DataContext="{Binding Source={StaticResource MSOTSystemDataSource}}" Margin="4">-->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Border x:Name="modalDialogBorder" Grid.RowSpan="3" Panel.ZIndex="9" Background="#6CD4CFCF" Visibility="Hidden"/>

        <Grid Background="Black" Height="Auto" Grid.Row="2" Margin="0,10,0,0">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Right" Orientation="Horizontal">
                <StackPanel Orientation="Horizontal" ToolTip="Disk Usage" Margin="10,0,30,0">
                    <Label Content="Disk status:" Foreground="White" VerticalAlignment="Center" Margin="0,0,10,0"/>
                    <ProgressBar x:Name="DiskStatusProgressBar"  Width="210" HorizontalAlignment="Center" Height="20" Style="{DynamicResource ProgressBarStyle}">
                        <ProgressBar.ToolTip>
                            <ToolTip>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock x:Name="DiskStatusToolTip" Text="%" Margin="2,0,0,0"/>
                                </StackPanel>
                            </ToolTip>
                        </ProgressBar.ToolTip>
                    </ProgressBar>
                </StackPanel>

                <TextBlock x:Name="clockTextBlock" Text="" TextWrapping="Wrap" MinWidth="70" Margin="1,1,10,1" VerticalAlignment="Center" ToolTip="Local Time" Foreground="White"/>
                <TextBlock x:Name="dateTextBlock" Text="" TextWrapping="Wrap" MinWidth="70" Margin="1,1,10,1" VerticalAlignment="Center" ToolTip="Local Date" Foreground="White"/>
            </StackPanel>

            <StackPanel x:Name="footerStackPanel" Orientation="Horizontal" HorizontalAlignment="Left" Height="60" VerticalAlignment="Top" IsEnabled="True">
                <ToggleButton x:Name="overviewToggleButton" Content="Scan overview" Width="253" Style="{DynamicResource ToggleButtonNeonStyle}" IsHitTestVisible="True" 
                                ClickMode="Press" Checked="overviewToggleButton_Checked" IsEnabled="True"/>
                <ToggleButton x:Name="acquisitionToggleButton" Content="Examination" Width="253" Style="{DynamicResource ToggleButtonNeonStyle}" IsHitTestVisible="true" 
                                ClickMode="Press" Checked="acquisitionToggleButton_Checked"/>
                <ToggleButton x:Name="analysisToggleButton" Content="Reconstruction" Width="253" Style="{DynamicResource ToggleButtonNeonStyle}" IsHitTestVisible="true" 
                                ClickMode="Press" Checked="analysisToggleButton_Checked" Command="{Binding ProjectManager.ActiveStudy.CommandLoadSuperSession, Mode=OneWay}" IsEnabled="true"/>
            </StackPanel>
        </Grid>

        <Grid x:Name="userMainView" Grid.Row="1" IsEnabled="true">
            <Grid.RowDefinitions>
                <RowDefinition Height="323*"/>
                <RowDefinition Height="69*"/>
            </Grid.RowDefinitions>
            <local:ViewPatientOverview x:Name="patientOverviewControl" Margin="10,10,-10,-10" Grid.RowSpan="2" />
            <local:ViewScanningTab x:Name="ScanningControl" Visibility="Collapsed" Grid.RowSpan="2"/>
            <local:ViewReconstructionTab x:Name="ReconstructionControl" Visibility="Collapsed" Grid.RowSpan="2"/>
        </Grid>

        <exceedToolkit:WindowContainer x:Name="childWindowContainer" Grid.RowSpan="3" Panel.ZIndex="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ModalBackgroundBrush="#80ffffff">
            <exceedToolkit:ChildWindow x:Name="patientPopupChildWindow" DataContext="{Binding ProjectManager.PatientsManager}" IsModal="True" Caption="Select study" WindowStartupLocation="Center" d:IsHidden="False" Style="{DynamicResource ChildWindowWiderCaptionStyle}" Visibility="Collapsed" CloseButtonVisibility="Collapsed">
                <local:ViewPatientsPopup x:Name="patientPopup"/>
            </exceedToolkit:ChildWindow>

            <exceedToolkit:ChildWindow x:Name="aboutPopupChildWindow" DataContext="{Binding}" WindowStyle="None" IsModal="True" Visibility="Collapsed" WindowStartupLocation="Center" d:IsHidden="True">
                <local:ViewAboutRSOM x:Name="aboutPopup"/>
            </exceedToolkit:ChildWindow>



            <exceedToolkit:ChildWindow x:Name="mainIssueReportChildWindow" DataContext="{Binding}"  CloseButtonVisibility="Collapsed" WindowStartupLocation="Center" d:IsHidden="True">

            </exceedToolkit:ChildWindow>

            <exceedToolkit:ChildWindow x:Name="busyIndicatorChildWindow" IsModal="True" WindowStartupLocation="Center" d:IsHidden="True" CloseButtonVisibility="Collapsed">
                <exceedToolkit:ChildWindow.Style>
                    <Style TargetType="{x:Type exceedToolkit:ChildWindow}" >
                        <Setter Property="WindowState" Value="Closed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsBusy}" Value="True">
                                <Setter Property="WindowState" Value="Open"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </exceedToolkit:ChildWindow.Style>
                <exceedToolkit:BusyIndicator DisplayAfter="0" IsBusy="True"  />
            </exceedToolkit:ChildWindow>
        </exceedToolkit:WindowContainer>

        <Grid Background="Black" Grid.Row="0" Margin="0,0,0,0" Height="65">
            <StackPanel Orientation="Horizontal">
                <Button ToolTip="Select study" Height="Auto" Width="Auto" Margin="2,0,2,0" Click="selectPatientButtonClick">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Width" Value="{StaticResource UidButtonWidth}"/>
                            <Setter Property="Height" Value="{StaticResource UidButtonHeight}"/>
                            <Setter Property="Padding" Value="{DynamicResource UidButtonPadding}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border x:Name="border" BorderThickness="{DynamicResource UidButtonBorderThickness}" Width="Auto" Height="{TemplateBinding Height}" CornerRadius="{DynamicResource UidButtonCornerRadius}" Background="#00000000">
                                            <StackPanel Orientation="Horizontal">
                                                <Grid Width="{TemplateBinding Width}" Margin="{TemplateBinding Padding}">
                                                    <Path x:Name="path"  Fill="White" Stretch="Uniform" Data="{Binding Mode=OneWay, Source={StaticResource IconStudy}}"/>
                                                </Grid>
                                            </StackPanel>
                                        </Border>

                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Button.Style>

                </Button>
                <Grid MaxWidth="300" Width="Auto" Visibility="Visible">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <Label x:Name="actualPatientfullNameLabel"  Content="" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" Padding="1"/>
                        <Label x:Name="actualPatientbirthDateLabel"  Content="" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" Padding="1" Margin="5,0,0,0"/>
                    </StackPanel>

                    <StackPanel Grid.Row="1" Orientation="Horizontal">
                        <Label x:Name="idLabel" Content="ID:" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" Padding="1"/>
                        <Label x:Name="actualPatientidLabel"  Content="" Foreground="White" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" Padding="1"/>
                    </StackPanel>
                </Grid>
            </StackPanel>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">

                <!--<Button x:Name="maintenanceBtn" Click="maintenanceBtn_Click" HorizontalContentAlignment="Center" Style="{DynamicResource UidButtonInvertedStyle}" ToolTip="Maintenance" Content="{DynamicResource IconSystemInfo}" Margin="4,0" Visibility="Visible" />
                <Button x:Name="aboutButton" Content="{DynamicResource IconAbout}" Style="{DynamicResource UidButtonInvertedStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,0" Click="aboutButton_Click" IsEnabled="True"/>-->
                <Menu x:Name="closeMenu" Background="{x:Null}" VerticalAlignment="Center" Margin="4,0" HorizontalAlignment="Center" IsEnabled="True">
                    <MenuItem Template="{DynamicResource MenuItemVectorIconInvertedControlTemplate}" Header="{DynamicResource IconExit}" ToolTip="Shut down/Log off">
                        <!--<MenuItem x:Name="logOffMenuItem" Header="Log off" Style="{DynamicResource UidMenuItemStyle}" Command="{Binding CommandExitSystem, Mode=OneWay}" CommandParameter="" Click="logOffItem_Click"/>
                        <MenuItem x:Name="shutDownMenuItem" Header="Shut down" Style="{DynamicResource UidMenuItemStyle}"  Command="{Binding CommandExitSystem, Mode=OneWay}" CommandParameter="" Click="shutDownItem_Click"/>-->
                        <MenuItem x:Name="exitMenuItem" Header="Exit" Style="{DynamicResource UidMenuItemStyle}"  Command="{Binding CommandExitSystem, Mode=OneWay}" CommandParameter="" Visibility="Visible" Click="exitMenuItem_Click"/>
                    </MenuItem>
                </Menu>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
